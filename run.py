"""
–§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Photo Editor Pro.
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import logging
import sys
import os
from PIL import Image, ImageTk

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

class ModernPhotoEditor:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ç–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."""
    
    def __init__(self, root):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞."""
        self.root = root
        self.original_image = None
        self.processed_image = None
        self.setup_window()
        self.setup_styles()
        self.create_interface()
        
    def setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞."""
        self.root.title("Photo Editor Pro - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        self.root.geometry("1400x900")
        self.root.configure(bg="#2b2b2b")
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (1400 // 2)
        y = (self.root.winfo_screenheight() // 2) - (900 // 2)
        self.root.geometry(f"1400x900+{x}+{y}")
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # –¶–≤–µ—Ç–∞ –≤ —Å—Ç–∏–ª–µ —Ñ–æ—Ç–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        bg_color = "#2b2b2b"
        panel_color = "#3c3c3c"
        accent_color = "#0078d4"
        text_color = "#ffffff"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.style.configure('Modern.TFrame', background=bg_color)
        self.style.configure('Modern.TLabelFrame', 
                           background=panel_color, 
                           foreground=text_color,
                           borderwidth=1,
                           relief='solid')
        self.style.configure('Modern.TLabelFrame.Label', 
                           background=panel_color, 
                           foreground=text_color,
                           font=('Segoe UI', 10, 'bold'))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout –¥–ª—è LabelFrame
        self.style.layout('Modern.TLabelFrame',
                         [('LabelFrame.border', {'sticky': 'nswe'})])
        self.style.layout('Modern.TLabelFrame.Label',
                         [('LabelFrame.padding', {'sticky': 'nswe'})])
        self.style.configure('Modern.TLabel', 
                           background=panel_color, 
                           foreground=text_color,
                           font=('Segoe UI', 9))
        self.style.configure('Modern.TButton', 
                           background=accent_color,
                           foreground=text_color,
                           font=('Segoe UI', 9, 'bold'),
                           borderwidth=0,
                           focuscolor='none')
        self.style.map('Modern.TButton',
                      background=[('active', '#106ebe'),
                                ('pressed', '#005a9e')])
        self.style.configure('Modern.TCombobox',
                           fieldbackground=panel_color,
                           background=panel_color,
                           foreground=text_color,
                           borderwidth=1,
                           arrowcolor=text_color)
        self.style.map('Modern.TCombobox',
                      fieldbackground=[('readonly', panel_color)],
                      background=[('readonly', panel_color)])
        self.style.configure('Modern.TEntry',
                           fieldbackground=panel_color,
                           background=panel_color,
                           foreground=text_color,
                           borderwidth=1,
                           insertcolor=text_color)
        self.style.configure('Modern.TText',
                           background=panel_color,
                           foreground=text_color,
                           borderwidth=1,
                           insertcolor=text_color)
        self.style.configure('Title.TLabel',
                           background=bg_color,
                           foreground=text_color,
                           font=('Segoe UI', 18, 'bold'))
        self.style.configure('Status.TLabel',
                           background=panel_color,
                           foreground=text_color,
                           font=('Segoe UI', 8),
                           relief='flat')
    
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root, style='Modern.TFrame', padding="0")
        main_container.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.create_header(main_container)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å
        self.create_workspace(main_container)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.create_bottom_panel(main_container)
    
    def create_header(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        header_frame = ttk.Frame(parent, style='Modern.TFrame')
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        title_label = ttk.Label(header_frame, text="Photo Editor Pro", style='Title.TLabel')
        title_label.pack(side=tk.LEFT, padx=20, pady=10)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(header_frame, style='Modern.TFrame')
        control_frame.pack(side=tk.RIGHT, padx=20, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        load_btn = ttk.Button(control_frame, text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å", style='Modern.TButton', command=self.load_image)
        load_btn.pack(side=tk.LEFT, padx=5)
        
        save_btn = ttk.Button(control_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", style='Modern.TButton', command=self.save_image)
        save_btn.pack(side=tk.LEFT, padx=5)
        
        reset_btn = ttk.Button(control_frame, text="üîÑ –°–±—Ä–æ—Å", style='Modern.TButton', command=self.reset_image)
        reset_btn.pack(side=tk.LEFT, padx=5)
    
    def create_workspace(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å."""
        workspace_frame = ttk.Frame(parent, style='Modern.TFrame')
        workspace_frame.pack(fill=tk.BOTH, expand=True, padx=20)
        workspace_frame.columnconfigure(0, weight=2)
        workspace_frame.columnconfigure(1, weight=1)
        
        # –û–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.create_image_area(workspace_frame)
        
        # –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.create_settings_panel(workspace_frame)
    
    def create_image_area(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        display_frame = ttk.LabelFrame(parent, text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", style='Modern.TLabelFrame', padding="10")
        display_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        display_frame.columnconfigure(0, weight=1)
        display_frame.columnconfigure(1, weight=1)
        
        # –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        original_frame = ttk.LabelFrame(display_frame, text="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", style='Modern.TLabelFrame', padding="5")
        original_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))
        
        self.original_canvas = tk.Canvas(original_frame, bg="#1e1e1e", highlightthickness=0)
        self.original_canvas.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.original_canvas.create_text(200, 150, text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n–¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã", 
                                        fill="#666666", font=("Segoe UI", 12), justify=tk.CENTER)
        
        # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        processed_frame = ttk.LabelFrame(display_frame, text="–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", style='Modern.TLabelFrame', padding="5")
        processed_frame.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(5, 0))
        
        self.processed_canvas = tk.Canvas(processed_frame, bg="#1e1e1e", highlightthickness=0)
        self.processed_canvas.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.processed_canvas.create_text(200, 150, text="–ü—Ä–∏–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", 
                                         fill="#666666", font=("Segoe UI", 12), justify=tk.CENTER)
    
    def create_settings_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        settings_frame = ttk.LabelFrame(parent, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", style='Modern.TLabelFrame', padding="15")
        settings_frame.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(10, 0))
        
        # –¢–∏–ø –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        ttk.Label(settings_frame, text="–¢–∏–ø –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", style='Modern.TLabel').pack(anchor=tk.W, pady=(0, 5))
        self.transform_combo = ttk.Combobox(settings_frame, 
                                          values=["–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ", "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ", "–ë–∏–Ω–∞—Ä–Ω–æ–µ", "–í—ã—Ä–µ–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π"], 
                                          state="readonly", width=20, style='Modern.TCombobox')
        self.transform_combo.pack(fill=tk.X, pady=(0, 10))
        self.transform_combo.set("–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ")
        self.transform_combo.bind("<<ComboboxSelected>>", self.on_transform_change)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        self.desc_text = tk.Text(settings_frame, height=4, width=30, wrap=tk.WORD, 
                               bg="#3c3c3c", fg="#ffffff", font=('Segoe UI', 9))
        self.desc_text.pack(fill=tk.X, pady=(0, 10))
        self.desc_text.insert(1.0, "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –¥–µ—Ç–∞–ª–µ–π –≤ —Ç–µ–º–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        self.desc_text.configure(state=tk.DISABLED)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–∫—Ä—ã—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.params_frame = ttk.Frame(settings_frame, style='Modern.TFrame')
        self.params_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.mode_var = tk.StringVar(value="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        self.gamma_var = tk.StringVar(value="1.0")
        self.c_var = tk.StringVar(value="1.0")
        self.threshold_var = tk.StringVar(value="128")
        self.threshold_mode_var = tk.StringVar(value="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π")
        self.preset_var = tk.StringVar(value="–°—Ä–µ–¥–Ω–∏–π (128)")
        self.min_brightness_var = tk.StringVar(value="0")
        self.max_brightness_var = tk.StringVar(value="255")
        self.outside_mode_var = tk.StringVar(value="–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞")
        self.constant_value_var = tk.StringVar(value="0")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.create_parameter_elements()
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        apply_btn = ttk.Button(settings_frame, text="‚ú® –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", style='Modern.TButton', command=self.apply_transform)
        apply_btn.pack(fill=tk.X, pady=(10, 0))
    
    def create_parameter_elements(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π."""
        # –†–µ–∂–∏–º (–¥–ª—è –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –∏ —Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ)
        self.mode_label = ttk.Label(self.params_frame, text="–†–µ–∂–∏–º:", style='Modern.TLabel')
        self.mode_combo = ttk.Combobox(self.params_frame, textvariable=self.mode_var,
                                      values=["–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", "–í—Ä—É—á–Ω—É—é"], 
                                      state="readonly", width=15, style='Modern.TCombobox')
        self.mode_combo.bind("<<ComboboxSelected>>", self.on_mode_change)
        
        # –ì–∞–º–º–∞ (–¥–ª—è —Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ)
        self.gamma_label = ttk.Label(self.params_frame, text="–ì–∞–º–º–∞:", style='Modern.TLabel')
        self.gamma_entry = ttk.Entry(self.params_frame, textvariable=self.gamma_var, width=15, style='Modern.TEntry')
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç c (–¥–ª—è –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ)
        self.c_label = ttk.Label(self.params_frame, text="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç c:", style='Modern.TLabel')
        self.c_entry = ttk.Entry(self.params_frame, textvariable=self.c_var, width=15, style='Modern.TEntry')
        
        # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ)
        self.threshold_mode_label = ttk.Label(self.params_frame, text="–†–µ–∂–∏–º –ø–æ—Ä–æ–≥–∞:", style='Modern.TLabel')
        self.threshold_mode_combo = ttk.Combobox(self.params_frame, textvariable=self.threshold_mode_var,
                                                values=["–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π", "–ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ"], 
                                                state="readonly", width=15, style='Modern.TCombobox')
        self.threshold_mode_combo.bind("<<ComboboxSelected>>", self.on_threshold_mode_change)
        
        self.threshold_label = ttk.Label(self.params_frame, text="–ü–æ—Ä–æ–≥:", style='Modern.TLabel')
        self.threshold_entry = ttk.Entry(self.params_frame, textvariable=self.threshold_var, width=15, style='Modern.TEntry')
        
        # –ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        self.preset_label = ttk.Label(self.params_frame, text="–ó–∞–≥–æ—Ç–æ–≤–∫–∞:", style='Modern.TLabel')
        self.preset_combo = ttk.Combobox(self.params_frame, textvariable=self.preset_var,
                                        values=["–û—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–π (64)", "–°–≤–µ—Ç–ª—ã–π (96)", "–°—Ä–µ–¥–Ω–∏–π (128)", 
                                               "–¢–µ–º–Ω—ã–π (160)", "–û—á–µ–Ω—å —Ç–µ–º–Ω—ã–π (192)", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–µ–º–Ω—ã–π (224)"],
                                        state="readonly", width=15, style='Modern.TCombobox')
        self.preset_combo.bind("<<ComboboxSelected>>", self.on_preset_change)
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã—Ä–µ–∑–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π
        self.min_brightness_label = ttk.Label(self.params_frame, text="–ú–∏–Ω. —è—Ä–∫–æ—Å—Ç—å:", style='Modern.TLabel')
        self.min_brightness_entry = ttk.Entry(self.params_frame, textvariable=self.min_brightness_var, width=15, style='Modern.TEntry')
        
        self.max_brightness_label = ttk.Label(self.params_frame, text="–ú–∞–∫—Å. —è—Ä–∫–æ—Å—Ç—å:", style='Modern.TLabel')
        self.max_brightness_entry = ttk.Entry(self.params_frame, textvariable=self.max_brightness_var, width=15, style='Modern.TEntry')
        
        self.outside_mode_label = ttk.Label(self.params_frame, text="–†–µ–∂–∏–º –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:", style='Modern.TLabel')
        self.outside_mode_combo = ttk.Combobox(self.params_frame, textvariable=self.outside_mode_var,
                                             values=["–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞", "–ò—Å—Ö–æ–¥–Ω–æ–µ"], 
                                             state="readonly", width=15, style='Modern.TCombobox')
        self.outside_mode_combo.bind("<<ComboboxSelected>>", self.on_outside_mode_change)
        
        self.constant_value_label = ttk.Label(self.params_frame, text="–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞:", style='Modern.TLabel')
        self.constant_value_entry = ttk.Entry(self.params_frame, textvariable=self.constant_value_var, width=15, style='Modern.TEntry')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.update_ui_for_transform("–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ")
    
    def create_bottom_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å."""
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = ttk.LabelFrame(parent, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", style='Modern.TLabelFrame', padding="10")
        info_frame.pack(fill=tk.X, pady=(10, 0), padx=20)
        
        self.info_text = tk.Text(info_frame, height=3, wrap=tk.WORD, 
                               bg="#3c3c3c", fg="#ffffff", font=('Segoe UI', 9))
        self.info_text.pack(fill=tk.X)
        self.info_text.insert(1.0, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(parent, textvariable=self.status_var, style='Status.TLabel')
        status_bar.pack(fill=tk.X, pady=(10, 0), padx=20)
    
    def load_image(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        file_types = [
            ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png *.jpg *.jpeg *.bmp *.tiff *.gif"),
            ("PNG —Ñ–∞–π–ª—ã", "*.png"),
            ("JPEG —Ñ–∞–π–ª—ã", "*.jpg *.jpeg"),
            ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
        ]
        
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            filetypes=file_types
        )
        
        if file_path:
            try:
                self.original_image = Image.open(file_path)
                self.display_original_image()
                self.update_info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {os.path.basename(file_path)}")
                self.status_var.set(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {os.path.basename(file_path)}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
                self.status_var.set("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    def display_original_image(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        if self.original_image:
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_size = (400, 300)
            display_image = self.original_image.copy()
            display_image.thumbnail(display_size, Image.Resampling.LANCZOS)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PhotoImage
            photo = ImageTk.PhotoImage(display_image)
            
            # –û—á–∏—â–∞–µ–º canvas –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.original_canvas.delete("all")
            self.original_canvas.create_image(200, 150, image=photo)
            self.original_canvas.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
    
    def apply_transform(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ."""
        if not self.original_image:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        
        transform_type = self.transform_combo.get()
        self.status_var.set(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {transform_type.lower()} –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            params = self.get_transform_parameters()
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.processed_image = self.original_image.copy()
            self.display_processed_image()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
            param_info = self.format_parameters_info(params)
            self.update_info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {transform_type}\n{param_info}")
            self.status_var.set(f"{transform_type} –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {e}")
            self.status_var.set("–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
    
    def get_transform_parameters(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
        transform_type = self.transform_combo.get()
        params = {'transform_type': transform_type}
        
        if transform_type == "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ":
            mode = self.mode_var.get()
            params['mode'] = mode
            if mode == "–í—Ä—É—á–Ω—É—é":
                try:
                    params['c'] = float(self.c_var.get())
                except ValueError:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ c")
        
        elif transform_type == "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ":
            mode = self.mode_var.get()
            params['mode'] = mode
            if mode == "–í—Ä—É—á–Ω—É—é":
                try:
                    params['gamma'] = float(self.gamma_var.get())
                except ValueError:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–º–º—ã")
        
        elif transform_type == "–ë–∏–Ω–∞—Ä–Ω–æ–µ":
            mode = self.threshold_mode_var.get()
            params['threshold_mode'] = mode
            if mode == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π":
                try:
                    params['threshold'] = int(self.threshold_var.get())
                except ValueError:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞")
            else:  # –ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ
                preset = self.preset_var.get()
                threshold_map = {
                    "–û—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–π (64)": 64,
                    "–°–≤–µ—Ç–ª—ã–π (96)": 96,
                    "–°—Ä–µ–¥–Ω–∏–π (128)": 128,
                    "–¢–µ–º–Ω—ã–π (160)": 160,
                    "–û—á–µ–Ω—å —Ç–µ–º–Ω—ã–π (192)": 192,
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–µ–º–Ω—ã–π (224)": 224
                }
                params['threshold'] = threshold_map.get(preset, 128)
        
        elif transform_type == "–í—ã—Ä–µ–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π":
            try:
                params['min_brightness'] = int(self.min_brightness_var.get())
                params['max_brightness'] = int(self.max_brightness_var.get())
                params['outside_mode'] = self.outside_mode_var.get()
                if self.outside_mode_var.get() == "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞":
                    params['constant_value'] = int(self.constant_value_var.get())
            except ValueError:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —è—Ä–∫–æ—Å—Ç–∏")
        
        return params
    
    def format_parameters_info(self, params):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        transform_type = params['transform_type']
        info_lines = []
        
        if transform_type == "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ":
            mode = params.get('mode', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
            info_lines.append(f"–†–µ–∂–∏–º: {mode}")
            if mode == "–í—Ä—É—á–Ω—É—é" and 'c' in params:
                info_lines.append(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç c: {params['c']}")
        
        elif transform_type == "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ":
            mode = params.get('mode', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
            info_lines.append(f"–†–µ–∂–∏–º: {mode}")
            if mode == "–í—Ä—É—á–Ω—É—é" and 'gamma' in params:
                info_lines.append(f"–ì–∞–º–º–∞: {params['gamma']}")
        
        elif transform_type == "–ë–∏–Ω–∞—Ä–Ω–æ–µ":
            mode = params.get('threshold_mode', '–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π')
            info_lines.append(f"–†–µ–∂–∏–º –ø–æ—Ä–æ–≥–∞: {mode}")
            if 'threshold' in params:
                info_lines.append(f"–ü–æ—Ä–æ–≥: {params['threshold']}")
        
        elif transform_type == "–í—ã—Ä–µ–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π":
            info_lines.append(f"–î–∏–∞–ø–∞–∑–æ–Ω: {params.get('min_brightness', 0)} - {params.get('max_brightness', 255)}")
            info_lines.append(f"–†–µ–∂–∏–º –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {params.get('outside_mode', '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞')}")
            if params.get('outside_mode') == "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞" and 'constant_value' in params:
                info_lines.append(f"–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞: {params['constant_value']}")
        
        return "\n".join(info_lines) if info_lines else "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã"
    
    def display_processed_image(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        if self.processed_image:
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_size = (400, 300)
            display_image = self.processed_image.copy()
            display_image.thumbnail(display_size, Image.Resampling.LANCZOS)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PhotoImage
            photo = ImageTk.PhotoImage(display_image)
            
            # –û—á–∏—â–∞–µ–º canvas –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.processed_canvas.delete("all")
            self.processed_canvas.create_image(200, 150, image=photo)
            self.processed_canvas.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
    
    def save_image(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        if not self.processed_image:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        file_types = [
            ("PNG —Ñ–∞–π–ª—ã", "*.png"),
            ("JPEG —Ñ–∞–π–ª—ã", "*.jpg"),
            ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
        ]
        
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            defaultextension=".png",
            filetypes=file_types
        )
        
        if file_path:
            try:
                self.processed_image.save(file_path)
                self.status_var.set(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.basename(file_path)}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
                self.status_var.set("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    def reset_image(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."""
        if not self.original_image:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞")
            return
        
        self.processed_image = None
        self.processed_canvas.delete("all")
        self.processed_canvas.create_text(200, 150, text="–ü—Ä–∏–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", 
                                        fill="#666666", font=("Segoe UI", 12), justify=tk.CENTER)
        self.update_info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")
        self.status_var.set("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")
    
    def on_transform_change(self, event=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
        transform_type = self.transform_combo.get()
        
        descriptions = {
            "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ": "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –¥–µ—Ç–∞–ª–µ–π –≤ —Ç–µ–º–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
            "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ": "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≥–∞–º–º–∞.",
            "–ë–∏–Ω–∞—Ä–Ω–æ–µ": "–ë–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.",
            "–í—ã—Ä–µ–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π": "–í—ã—Ä–µ–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π –≤—ã–¥–µ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —è—Ä–∫–æ—Å—Ç–µ–π –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
        }
        
        self.desc_text.configure(state=tk.NORMAL)
        self.desc_text.delete(1.0, tk.END)
        self.desc_text.insert(1.0, descriptions.get(transform_type, ""))
        self.desc_text.configure(state=tk.DISABLED)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        self.update_ui_for_transform(transform_type)
    
    def update_ui_for_transform(self, transform_type):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–Ω–∞—á–∞–ª–∞
        self.hide_all_parameter_elements()
        
        if transform_type == "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç c
            self.mode_label.pack(anchor=tk.W, pady=(5, 0))
            self.mode_combo.pack(anchor=tk.W, pady=(0, 5))
            self.on_mode_change()
        elif transform_type == "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –∏ –≥–∞–º–º—É
            self.mode_label.pack(anchor=tk.W, pady=(5, 0))
            self.mode_combo.pack(anchor=tk.W, pady=(0, 5))
            self.on_mode_change()
        elif transform_type == "–ë–∏–Ω–∞—Ä–Ω–æ–µ":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ—Ä–æ–≥–∞
            self.threshold_mode_label.pack(anchor=tk.W, pady=(5, 0))
            self.threshold_mode_combo.pack(anchor=tk.W, pady=(0, 5))
            self.on_threshold_mode_change()
        elif transform_type == "–í—ã—Ä–µ–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤—ã—Ä–µ–∑–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            self.min_brightness_label.pack(anchor=tk.W, pady=(5, 0))
            self.min_brightness_entry.pack(anchor=tk.W, pady=(0, 5))
            self.max_brightness_label.pack(anchor=tk.W, pady=(5, 0))
            self.max_brightness_entry.pack(anchor=tk.W, pady=(0, 5))
            self.outside_mode_label.pack(anchor=tk.W, pady=(5, 0))
            self.outside_mode_combo.pack(anchor=tk.W, pady=(0, 5))
            self.on_outside_mode_change()
    
    def hide_all_parameter_elements(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        elements = [
            self.mode_label, self.mode_combo,
            self.gamma_label, self.gamma_entry,
            self.c_label, self.c_entry,
            self.threshold_mode_label, self.threshold_mode_combo,
            self.threshold_label, self.threshold_entry,
            self.preset_label, self.preset_combo,
            self.min_brightness_label, self.min_brightness_entry,
            self.max_brightness_label, self.max_brightness_entry,
            self.outside_mode_label, self.outside_mode_combo,
            self.constant_value_label, self.constant_value_entry
        ]
        for element in elements:
            element.pack_forget()
    
    def on_mode_change(self, event=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞."""
        mode = self.mode_var.get()
        transform_type = self.transform_combo.get()
        
        if mode == "–í—Ä—É—á–Ω—É—é":
            if transform_type == "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ":
                self.c_label.pack(anchor=tk.W, pady=(5, 0))
                self.c_entry.pack(anchor=tk.W, pady=(0, 5))
            elif transform_type == "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ":
                self.gamma_label.pack(anchor=tk.W, pady=(5, 0))
                self.gamma_entry.pack(anchor=tk.W, pady=(0, 5))
        else:
            self.gamma_label.pack_forget()
            self.gamma_entry.pack_forget()
            self.c_label.pack_forget()
            self.c_entry.pack_forget()
    
    def on_threshold_mode_change(self, event=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ—Ä–æ–≥–∞."""
        mode = self.threshold_mode_var.get()
        
        if mode == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π":
            self.threshold_label.pack(anchor=tk.W, pady=(5, 0))
            self.threshold_entry.pack(anchor=tk.W, pady=(0, 5))
            self.preset_label.pack_forget()
            self.preset_combo.pack_forget()
        else:  # –ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ
            self.preset_label.pack(anchor=tk.W, pady=(5, 0))
            self.preset_combo.pack(anchor=tk.W, pady=(0, 5))
            self.threshold_label.pack_forget()
            self.threshold_entry.pack_forget()
    
    def on_preset_change(self, event=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞."""
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–≥–æ—Ç–æ–≤–∫–∏
        preset = self.preset_var.get()
        threshold_map = {
            "–û—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–π (64)": 64,
            "–°–≤–µ—Ç–ª—ã–π (96)": 96,
            "–°—Ä–µ–¥–Ω–∏–π (128)": 128,
            "–¢–µ–º–Ω—ã–π (160)": 160,
            "–û—á–µ–Ω—å —Ç–µ–º–Ω—ã–π (192)": 192,
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–µ–º–Ω—ã–π (224)": 224
        }
        self.threshold_var.set(str(threshold_map.get(preset, 128)))
    
    def on_outside_mode_change(self, event=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
        mode = self.outside_mode_var.get()
        
        if mode == "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞":
            self.constant_value_label.pack(anchor=tk.W, pady=(5, 0))
            self.constant_value_entry.pack(anchor=tk.W, pady=(0, 5))
        else:
            self.constant_value_label.pack_forget()
            self.constant_value_entry.pack_forget()
    
    def update_info(self, message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å."""
        self.info_text.configure(state=tk.NORMAL)
        self.info_text.delete(1.0, tk.END)
        self.info_text.insert(1.0, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:\n{message}")
        self.info_text.configure(state=tk.DISABLED)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ Photo Editor Pro...")
        print("‚ú® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Å—Ç–∏–ª–µ —Ñ–æ—Ç–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞")
        print("üé® –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ —Å –∞–∫—Ü–µ–Ω—Ç–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏")
        print("üîÑ –£–¥–æ–±–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ/–ø–æ—Å–ª–µ")
        print()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        root = tk.Tk()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = ModernPhotoEditor(root)
        
        print("‚úÖ Photo Editor Pro –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
        print("   1. –ù–∞–∂–º–∏—Ç–µ 'üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å' –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("   2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏")
        print("   3. –ù–∞–∂–º–∏—Ç–µ '‚ú® –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'")
        print("   4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–º–æ—â—å—é 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'")
        print("   5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üîÑ –°–±—Ä–æ—Å' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É")
        print()
        
        # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        root.mainloop()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
