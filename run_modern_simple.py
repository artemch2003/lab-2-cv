"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç–∏–ª–µ–π.
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import sys
import os
from PIL import Image, ImageTk

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

class SimpleModernPhotoEditor:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ç–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä."""
    
    def __init__(self, root):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞."""
        self.root = root
        self.original_image = None
        self.processed_image = None
        self.setup_window()
        self.create_interface()
        
    def setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞."""
        self.root.title("Photo Editor Pro - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        self.root.geometry("1200x800")
        self.root.configure(bg="#2b2b2b")
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (1200 // 2)
        y = (self.root.winfo_screenheight() // 2) - (800 // 2)
        self.root.geometry(f"1200x800+{x}+{y}")
        
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.root, bg="#2b2b2b")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.create_header(main_frame)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å
        self.create_workspace(main_frame)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.create_bottom_panel(main_frame)
    
    def create_header(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        header_frame = tk.Frame(parent, bg="#2b2b2b")
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        title_label = tk.Label(header_frame, text="Photo Editor Pro", 
                              font=("Segoe UI", 18, "bold"), 
                              fg="#ffffff", bg="#2b2b2b")
        title_label.pack(side=tk.LEFT, padx=20, pady=10)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = tk.Frame(header_frame, bg="#2b2b2b")
        control_frame.pack(side=tk.RIGHT, padx=20, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        load_btn = tk.Button(control_frame, text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å", 
                            font=("Segoe UI", 10, "bold"),
                            bg="#0078d4", fg="#ffffff", 
                            relief="flat", padx=15, pady=5,
                            command=self.load_image)
        load_btn.pack(side=tk.LEFT, padx=5)
        
        save_btn = tk.Button(control_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                            font=("Segoe UI", 10, "bold"),
                            bg="#0078d4", fg="#ffffff", 
                            relief="flat", padx=15, pady=5,
                            command=self.save_image)
        save_btn.pack(side=tk.LEFT, padx=5)
        
        reset_btn = tk.Button(control_frame, text="üîÑ –°–±—Ä–æ—Å", 
                             font=("Segoe UI", 10, "bold"),
                             bg="#0078d4", fg="#ffffff", 
                             relief="flat", padx=15, pady=5,
                             command=self.reset_image)
        reset_btn.pack(side=tk.LEFT, padx=5)
    
    def create_workspace(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å."""
        workspace_frame = tk.Frame(parent, bg="#2b2b2b")
        workspace_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        workspace_frame.columnconfigure(0, weight=2)
        workspace_frame.columnconfigure(1, weight=1)
        
        # –û–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.create_image_area(workspace_frame)
        
        # –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.create_settings_panel(workspace_frame)
    
    def create_image_area(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        display_frame = tk.Frame(parent, bg="#3c3c3c", relief="solid", bd=1)
        display_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        display_frame.columnconfigure(0, weight=1)
        display_frame.columnconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(display_frame, text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
                              font=("Segoe UI", 12, "bold"), 
                              fg="#ffffff", bg="#3c3c3c")
        title_label.grid(row=0, column=0, columnspan=2, pady=10)
        
        # –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        original_frame = tk.Frame(display_frame, bg="#3c3c3c")
        original_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(10, 5), pady=(0, 10))
        
        original_title = tk.Label(original_frame, text="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                                 font=("Segoe UI", 10, "bold"), 
                                 fg="#ffffff", bg="#3c3c3c")
        original_title.pack(pady=(10, 5))
        
        self.original_canvas = tk.Canvas(original_frame, bg="#1e1e1e", height=300, highlightthickness=0)
        self.original_canvas.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        self.original_canvas.create_text(200, 150, text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n–¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã", 
                                        fill="#666666", font=("Segoe UI", 12), justify=tk.CENTER)
        
        # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        processed_frame = tk.Frame(display_frame, bg="#3c3c3c")
        processed_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(5, 10), pady=(0, 10))
        
        processed_title = tk.Label(processed_frame, text="–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                                  font=("Segoe UI", 10, "bold"), 
                                  fg="#ffffff", bg="#3c3c3c")
        processed_title.pack(pady=(10, 5))
        
        self.processed_canvas = tk.Canvas(processed_frame, bg="#1e1e1e", height=300, highlightthickness=0)
        self.processed_canvas.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        self.processed_canvas.create_text(200, 150, text="–ü—Ä–∏–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", 
                                         fill="#666666", font=("Segoe UI", 12), justify=tk.CENTER)
    
    def create_settings_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        settings_frame = tk.Frame(parent, bg="#3c3c3c", relief="solid", bd=1)
        settings_frame.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(10, 0))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", 
                              font=("Segoe UI", 12, "bold"), 
                              fg="#ffffff", bg="#3c3c3c")
        title_label.pack(pady=15)
        
        # –¢–∏–ø –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        type_label = tk.Label(settings_frame, text="–¢–∏–ø –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", 
                             font=("Segoe UI", 10), 
                             fg="#ffffff", bg="#3c3c3c")
        type_label.pack(anchor=tk.W, padx=15, pady=(0, 5))
        
        self.transform_var = tk.StringVar(value="–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ")
        transform_combo = ttk.Combobox(settings_frame, 
                                     textvariable=self.transform_var,
                                     values=["–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ", "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ", "–ë–∏–Ω–∞—Ä–Ω–æ–µ", "–í—ã—Ä–µ–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π"], 
                                     state="readonly", width=20)
        transform_combo.pack(fill=tk.X, padx=15, pady=(0, 10))
        transform_combo.bind("<<ComboboxSelected>>", self.on_transform_change)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_label = tk.Label(settings_frame, text="–û–ø–∏—Å–∞–Ω–∏–µ:", 
                               font=("Segoe UI", 10), 
                               fg="#ffffff", bg="#3c3c3c")
        desc_label.pack(anchor=tk.W, padx=15, pady=(10, 5))
        
        self.desc_text = tk.Text(settings_frame, height=4, width=25, wrap=tk.WORD, 
                               bg="#2b2b2b", fg="#ffffff", font=('Segoe UI', 9),
                               relief="solid", bd=1)
        self.desc_text.pack(fill=tk.X, padx=15, pady=(0, 10))
        self.desc_text.insert(1.0, "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –¥–µ—Ç–∞–ª–µ–π –≤ —Ç–µ–º–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        self.desc_text.configure(state=tk.DISABLED)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        apply_btn = tk.Button(settings_frame, text="‚ú® –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", 
                            font=("Segoe UI", 10, "bold"),
                            bg="#28a745", fg="#ffffff", 
                            relief="flat", padx=10, pady=8,
                            command=self.apply_transform)
        apply_btn.pack(fill=tk.X, padx=15, pady=10)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        self.on_transform_change()
    
    def create_bottom_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å."""
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = tk.Frame(parent, bg="#3c3c3c", relief="solid", bd=1)
        info_frame.pack(fill=tk.X, pady=(10, 0))
        
        info_title = tk.Label(info_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                             font=("Segoe UI", 12, "bold"), 
                             fg="#ffffff", bg="#3c3c3c")
        info_title.pack(pady=(10, 5))
        
        self.info_text = tk.Text(info_frame, height=3, wrap=tk.WORD, 
                               bg="#2b2b2b", fg="#ffffff", font=('Segoe UI', 9),
                               relief="solid", bd=1)
        self.info_text.pack(fill=tk.X, padx=15, pady=(0, 10))
        self.info_text.insert(1.0, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = tk.Label(parent, textvariable=self.status_var, 
                             font=("Segoe UI", 8), 
                             fg="#ffffff", bg="#3c3c3c",
                             relief="flat")
        status_bar.pack(fill=tk.X, pady=(10, 0))
    
    def load_image(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        file_types = [
            ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png *.jpg *.jpeg *.bmp *.tiff *.gif"),
            ("PNG —Ñ–∞–π–ª—ã", "*.png"),
            ("JPEG —Ñ–∞–π–ª—ã", "*.jpg *.jpeg"),
            ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
        ]
        
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            filetypes=file_types
        )
        
        if file_path:
            try:
                self.original_image = Image.open(file_path)
                self.display_original_image()
                self.update_info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {os.path.basename(file_path)}")
                self.status_var.set(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {os.path.basename(file_path)}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
                self.status_var.set("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    def display_original_image(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        if self.original_image:
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_size = (400, 300)
            display_image = self.original_image.copy()
            display_image.thumbnail(display_size, Image.Resampling.LANCZOS)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PhotoImage
            photo = ImageTk.PhotoImage(display_image)
            
            # –û—á–∏—â–∞–µ–º canvas –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.original_canvas.delete("all")
            self.original_canvas.create_image(200, 150, image=photo)
            self.original_canvas.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
    
    def apply_transform(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ."""
        if not self.original_image:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        
        transform_type = self.transform_var.get()
        self.status_var.set(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {transform_type.lower()} –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...")
        
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.processed_image = self.original_image.copy()
            self.display_processed_image()
            self.update_info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {transform_type}")
            self.status_var.set(f"{transform_type} –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {e}")
            self.status_var.set("–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
    
    def display_processed_image(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        if self.processed_image:
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_size = (400, 300)
            display_image = self.processed_image.copy()
            display_image.thumbnail(display_size, Image.Resampling.LANCZOS)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PhotoImage
            photo = ImageTk.PhotoImage(display_image)
            
            # –û—á–∏—â–∞–µ–º canvas –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.processed_canvas.delete("all")
            self.processed_canvas.create_image(200, 150, image=photo)
            self.processed_canvas.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
    
    def save_image(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        if not self.processed_image:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        file_types = [
            ("PNG —Ñ–∞–π–ª—ã", "*.png"),
            ("JPEG —Ñ–∞–π–ª—ã", "*.jpg"),
            ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
        ]
        
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            defaultextension=".png",
            filetypes=file_types
        )
        
        if file_path:
            try:
                self.processed_image.save(file_path)
                self.status_var.set(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.basename(file_path)}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
                self.status_var.set("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    def reset_image(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."""
        if not self.original_image:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞")
            return
        
        self.processed_image = None
        self.processed_canvas.delete("all")
        self.processed_canvas.create_text(200, 150, text="–ü—Ä–∏–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", 
                                        fill="#666666", font=("Segoe UI", 12), justify=tk.CENTER)
        self.update_info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")
        self.status_var.set("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")
    
    def on_transform_change(self, event=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
        transform_type = self.transform_var.get()
        
        descriptions = {
            "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ": "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –¥–µ—Ç–∞–ª–µ–π –≤ —Ç–µ–º–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
            "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ": "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≥–∞–º–º–∞.",
            "–ë–∏–Ω–∞—Ä–Ω–æ–µ": "–ë–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.",
            "–í—ã—Ä–µ–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π": "–í—ã—Ä–µ–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π –≤—ã–¥–µ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —è—Ä–∫–æ—Å—Ç–µ–π –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
        }
        
        self.desc_text.configure(state=tk.NORMAL)
        self.desc_text.delete(1.0, tk.END)
        self.desc_text.insert(1.0, descriptions.get(transform_type, ""))
        self.desc_text.configure(state=tk.DISABLED)
    
    def update_info(self, message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å."""
        self.info_text.configure(state=tk.NORMAL)
        self.info_text.delete(1.0, tk.END)
        self.info_text.insert(1.0, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:\n{message}")
        self.info_text.configure(state=tk.DISABLED)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ Photo Editor Pro...")
        print("‚ú® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Å—Ç–∏–ª–µ —Ñ–æ—Ç–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞")
        print("üé® –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ —Å –∞–∫—Ü–µ–Ω—Ç–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏")
        print("üîÑ –£–¥–æ–±–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ/–ø–æ—Å–ª–µ")
        print()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        root = tk.Tk()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = SimpleModernPhotoEditor(root)
        
        print("‚úÖ Photo Editor Pro –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
        print("   1. –ù–∞–∂–º–∏—Ç–µ 'üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å' –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("   2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏")
        print("   3. –ù–∞–∂–º–∏—Ç–µ '‚ú® –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'")
        print("   4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–º–æ—â—å—é 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'")
        print("   5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üîÑ –°–±—Ä–æ—Å' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É")
        print()
        
        # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        root.mainloop()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
