"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –≤ —Å—Ç–∏–ª–µ —Ñ–æ—Ç–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.
"""

import tkinter as tk
from tkinter import ttk
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)


class ModernInfoPanel:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å."""
    
    def __init__(self, parent_frame: ttk.Frame):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏.
        
        Args:
            parent_frame: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º
        """
        self.parent_frame = parent_frame
        self._create_widgets()
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏."""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        info_container = ttk.LabelFrame(self.parent_frame, 
                                      text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏", 
                                      style='Modern.TLabelFrame',
                                      padding="15")
        info_container.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        info_container.columnconfigure(0, weight=1)
        info_container.rowconfigure(0, weight=1)
        
        # –°–æ–∑–¥–∞–µ–º notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(info_container)
        self.notebook.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –í–∫–ª–∞–¥–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.create_basic_info_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        self.create_transform_info_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.create_statistics_tab()
    
    def create_basic_info_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        basic_frame = ttk.Frame(self.notebook, style='Modern.TFrame')
        self.notebook.add(basic_frame, text="üìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        basic_frame.columnconfigure(1, weight=1)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        self.basic_info_labels = {}
        
        # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ttk.Label(basic_frame, text="–†–∞–∑–º–µ—Ä:", style='Modern.TLabel').grid(row=0, column=0, sticky=tk.W, padx=(0, 10), pady=2)
        self.basic_info_labels['size'] = ttk.Label(basic_frame, text="–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", style='Modern.TLabel')
        self.basic_info_labels['size'].grid(row=0, column=1, sticky=tk.W)
        
        # –§–æ—Ä–º–∞—Ç
        ttk.Label(basic_frame, text="–§–æ—Ä–º–∞—Ç:", style='Modern.TLabel').grid(row=1, column=0, sticky=tk.W, padx=(0, 10), pady=2)
        self.basic_info_labels['format'] = ttk.Label(basic_frame, text="–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", style='Modern.TLabel')
        self.basic_info_labels['format'].grid(row=1, column=1, sticky=tk.W)
        
        # –†–µ–∂–∏–º
        ttk.Label(basic_frame, text="–†–µ–∂–∏–º:", style='Modern.TLabel').grid(row=2, column=0, sticky=tk.W, padx=(0, 10), pady=2)
        self.basic_info_labels['mode'] = ttk.Label(basic_frame, text="–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", style='Modern.TLabel')
        self.basic_info_labels['mode'].grid(row=2, column=1, sticky=tk.W)
        
        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        ttk.Label(basic_frame, text="–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:", style='Modern.TLabel').grid(row=3, column=0, sticky=tk.W, padx=(0, 10), pady=2)
        self.basic_info_labels['file_size'] = ttk.Label(basic_frame, text="–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", style='Modern.TLabel')
        self.basic_info_labels['file_size'].grid(row=3, column=1, sticky=tk.W)
        
        # –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        ttk.Label(basic_frame, text="–°—Ç–∞—Ç—É—Å:", style='Modern.TLabel').grid(row=4, column=0, sticky=tk.W, padx=(0, 10), pady=2)
        self.basic_info_labels['status'] = ttk.Label(basic_frame, text="–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", style='Modern.TLabel')
        self.basic_info_labels['status'].grid(row=4, column=1, sticky=tk.W)
    
    def create_transform_info_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏."""
        transform_frame = ttk.Frame(self.notebook, style='Modern.TFrame')
        self.notebook.add(transform_frame, text="‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        transform_frame.columnconfigure(1, weight=1)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
        self.transform_info_labels = {}
        
        # –¢–∏–ø –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        ttk.Label(transform_frame, text="–¢–∏–ø –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", style='Modern.TLabel').grid(row=0, column=0, sticky=tk.W, padx=(0, 10), pady=2)
        self.transform_info_labels['transform_name'] = ttk.Label(transform_frame, text="–ù–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ", style='Modern.TLabel')
        self.transform_info_labels['transform_name'].grid(row=0, column=1, sticky=tk.W)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        self.parameters_text = tk.Text(transform_frame, 
                                     height=8, 
                                     width=40, 
                                     wrap=tk.WORD,
                                     style='Modern.TText',
                                     state=tk.DISABLED)
        self.parameters_text.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(10, 0))
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        parameters_scrollbar = ttk.Scrollbar(transform_frame, 
                                           orient=tk.VERTICAL, 
                                           command=self.parameters_text.yview)
        parameters_scrollbar.grid(row=1, column=2, sticky=(tk.N, tk.S), pady=(10, 0))
        self.parameters_text.configure(yscrollcommand=parameters_scrollbar.set)
        
        transform_frame.rowconfigure(1, weight=1)
    
    def create_statistics_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        stats_frame = ttk.Frame(self.notebook, style='Modern.TFrame')
        self.notebook.add(stats_frame, text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_frame.columnconfigure(1, weight=1)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∫–∏
        self.stats_labels = {}
        
        # –°—Ä–µ–¥–Ω—è—è —è—Ä–∫–æ—Å—Ç—å
        ttk.Label(stats_frame, text="–°—Ä–µ–¥–Ω—è—è —è—Ä–∫–æ—Å—Ç—å:", style='Modern.TLabel').grid(row=0, column=0, sticky=tk.W, padx=(0, 10), pady=2)
        self.stats_labels['avg_brightness'] = ttk.Label(stats_frame, text="–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ", style='Modern.TLabel')
        self.stats_labels['avg_brightness'].grid(row=0, column=1, sticky=tk.W)
        
        # –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
        ttk.Label(stats_frame, text="–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å:", style='Modern.TLabel').grid(row=1, column=0, sticky=tk.W, padx=(0, 10), pady=2)
        self.stats_labels['contrast'] = ttk.Label(stats_frame, text="–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ", style='Modern.TLabel')
        self.stats_labels['contrast'].grid(row=1, column=1, sticky=tk.W)
        
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ)
        ttk.Label(stats_frame, text="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞:", style='Modern.TLabel').grid(row=2, column=0, sticky=tk.W, padx=(0, 10), pady=(10, 2))
        
        self.histogram_text = tk.Text(stats_frame, 
                                     height=6, 
                                     width=40, 
                                     wrap=tk.WORD,
                                     style='Modern.TText',
                                     state=tk.DISABLED)
        self.histogram_text.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        histogram_scrollbar = ttk.Scrollbar(stats_frame, 
                                          orient=tk.VERTICAL, 
                                          command=self.histogram_text.yview)
        histogram_scrollbar.grid(row=3, column=2, sticky=(tk.N, tk.S))
        self.histogram_text.configure(yscrollcommand=histogram_scrollbar.set)
        
        stats_frame.rowconfigure(3, weight=1)
    
    def update_info(self, info: Dict[str, Any]):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞–Ω–µ–ª–∏.
        
        Args:
            info: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        """
        if not info:
            self._clear_all_info()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self._update_basic_info(info)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
        self._update_transform_info(info)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_statistics(info)
    
    def _clear_all_info(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
        # –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        for label in self.basic_info_labels.values():
            label.configure(text="–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        
        # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
        for label in self.transform_info_labels.values():
            label.configure(text="–ù–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        
        self.parameters_text.configure(state=tk.NORMAL)
        self.parameters_text.delete(1.0, tk.END)
        self.parameters_text.configure(state=tk.DISABLED)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        for label in self.stats_labels.values():
            label.configure(text="–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ")
        
        self.histogram_text.configure(state=tk.NORMAL)
        self.histogram_text.delete(1.0, tk.END)
        self.histogram_text.configure(state=tk.DISABLED)
    
    def _update_basic_info(self, info: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
        self.basic_info_labels['size'].configure(text=info.get('size', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        self.basic_info_labels['format'].configure(text=info.get('format', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        self.basic_info_labels['mode'].configure(text=info.get('mode', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        self.basic_info_labels['file_size'].configure(text=info.get('file_size', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        self.basic_info_labels['status'].configure(text='–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ' if info.get('has_processed', False) else '–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
    
    def _update_transform_info(self, info: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏."""
        transform_name = info.get('transform_name', '–ù–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ')
        self.transform_info_labels['transform_name'].configure(text=transform_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        self.parameters_text.configure(state=tk.NORMAL)
        self.parameters_text.delete(1.0, tk.END)
        
        if 'detailed_parameters' in info:
            params = info['detailed_parameters']
            parameters_text = "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:\n\n"
            
            for key, value in params.items():
                if key == 'c':
                    parameters_text += f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç c: {round(value, 4)}\n"
                elif key == 'gamma':
                    parameters_text += f"–ì–∞–º–º–∞ Œ≥: {round(value, 4)}\n"
                elif key == 'threshold':
                    parameters_text += f"–ü–æ—Ä–æ–≥: {round(value, 1)}\n"
                elif key == 'min_brightness':
                    parameters_text += f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å: {round(value, 1)}\n"
                elif key == 'max_brightness':
                    parameters_text += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å: {round(value, 1)}\n"
                elif key == 'outside_mode':
                    parameters_text += f"–†–µ–∂–∏–º –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {value}\n"
                elif key == 'constant_value' and value is not None:
                    parameters_text += f"–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞: {round(value, 1)}\n"
                elif key == 'mode':
                    parameters_text += f"–†–µ–∂–∏–º: {value}\n"
        else:
            parameters_text = "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã"
        
        self.parameters_text.insert(1.0, parameters_text)
        self.parameters_text.configure(state=tk.DISABLED)
    
    def _update_statistics(self, info: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∫–∏
        self.stats_labels['avg_brightness'].configure(text=f"{info.get('avg_brightness', '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ')}")
        self.stats_labels['contrast'].configure(text=f"{info.get('contrast', '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ')}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
        self.histogram_text.configure(state=tk.NORMAL)
        self.histogram_text.delete(1.0, tk.END)
        
        if 'histogram' in info:
            histogram_text = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–µ–π:\n\n"
            histogram = info['histogram']
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            max_count = max(histogram) if histogram else 1
            for i, count in enumerate(histogram):
                if i % 32 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 32 –∑–Ω–∞—á–µ–Ω–∏—è
                    bar_length = int((count / max_count) * 20) if max_count > 0 else 0
                    bar = "‚ñà" * bar_length
                    histogram_text += f"{i:3d}: {bar} ({count})\n"
        else:
            histogram_text = "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞"
        
        self.histogram_text.insert(1.0, histogram_text)
        self.histogram_text.configure(state=tk.DISABLED)
    
    def clear_info(self):
        """–û—á–∏—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å."""
        self._clear_all_info()
