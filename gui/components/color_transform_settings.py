"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π.
–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ, —Å—Ç–µ–ø–µ–Ω–Ω–æ–µ, –±–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –≤—ã—Ä–µ–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π.
"""

import tkinter as tk
from tkinter import ttk
from typing import Callable, Dict, Any, Optional
import logging

from utils.validators import ParameterValidator

logger = logging.getLogger(__name__)


class ColorTransformSettings:
    """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π."""
    
    def __init__(self, parent_frame: ttk.Frame, on_transform_change: Callable[[str], None]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π.
        
        Args:
            parent_frame: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º
            on_transform_change: Callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        """
        self.parent_frame = parent_frame
        self.on_transform_change = on_transform_change
        self.validator = ParameterValidator()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        self.transform_type_var = tk.StringVar(value="–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ")
        self.mode_var = tk.StringVar(value="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        self.gamma_var = tk.StringVar(value="1.0")
        self.c_var = tk.StringVar(value="1.0")
        self.threshold_var = tk.StringVar(value="128")
        self.threshold_mode_var = tk.StringVar(value="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π")
        self.preset_var = tk.StringVar(value="–°—Ä–µ–¥–Ω–∏–π (128)")
        self.min_brightness_var = tk.StringVar(value="0")
        self.max_brightness_var = tk.StringVar(value="255")
        self.outside_mode_var = tk.StringVar(value="–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞")
        self.constant_value_var = tk.StringVar(value="0")
        
        self._create_widgets()
        self._setup_bindings()
    
    def _setup_styles(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç–∏–ª–∏
            style = ttk.Style()
            style.configure('Modern.TLabelFrame')
        except:
            # –ï—Å–ª–∏ —Å—Ç–∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏—Ö
            style = ttk.Style()
            style.theme_use('clam')
            
            # –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
            style.configure('Modern.TFrame', background='#2b2b2b')
            style.configure('Modern.TLabelFrame', 
                           background='#3c3c3c', 
                           foreground='#ffffff',
                           borderwidth=1,
                           relief='solid')
            style.configure('Modern.TLabelFrame.Label', 
                           background='#3c3c3c', 
                           foreground='#ffffff',
                           font=('Segoe UI', 10, 'bold'))
            style.configure('Modern.TLabel', 
                           background='#3c3c3c', 
                           foreground='#ffffff',
                           font=('Segoe UI', 9))
            style.configure('Modern.TButton', 
                           background='#0078d4',
                           foreground='#ffffff',
                           font=('Segoe UI', 9, 'bold'),
                           borderwidth=0,
                           focuscolor='none')
            style.configure('Modern.TCombobox',
                           fieldbackground='#3c3c3c',
                           background='#3c3c3c',
                           foreground='#ffffff',
                           borderwidth=1,
                           arrowcolor='#ffffff')
            style.configure('Modern.TEntry',
                           fieldbackground='#3c3c3c',
                           background='#3c3c3c',
                           foreground='#ffffff',
                           borderwidth=1,
                           insertcolor='#ffffff')
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π."""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
        self._setup_styles()
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.settings_container = ttk.LabelFrame(self.parent_frame, 
                                               text="üé® –¶–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", 
                                               style='Modern.TLabelFrame',
                                               padding="15")
        self.settings_container.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        self.settings_container.columnconfigure(0, weight=1)
        
        # –¢–∏–ø –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        self.create_transform_type_section()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        self.create_parameters_section()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_control_buttons()
    
    def create_transform_type_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
        type_frame = ttk.LabelFrame(self.settings_container, 
                                  text="–¢–∏–ø –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", 
                                  style='Modern.TLabelFrame',
                                  padding="10")
        type_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 15))
        type_frame.columnconfigure(0, weight=1)
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        transform_combo = ttk.Combobox(
            type_frame, 
            textvariable=self.transform_type_var,
            values=["–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ", "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ", "–ë–∏–Ω–∞—Ä–Ω–æ–µ", "–í—ã—Ä–µ–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π"], 
            state="readonly", 
            style='Modern.TCombobox',
            font=('Segoe UI', 10)
        )
        transform_combo.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        self.description_label = ttk.Label(type_frame, 
                                          text="–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –¥–µ—Ç–∞–ª–µ–π –≤ —Ç–µ–º–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                                          style='Modern.TLabel',
                                          wraplength=300,
                                          justify=tk.LEFT)
        self.description_label.grid(row=1, column=0, sticky=(tk.W, tk.E))
    
    def create_parameters_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
        self.parameters_frame = ttk.LabelFrame(self.settings_container, 
                                             text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", 
                                             style='Modern.TLabelFrame',
                                             padding="10")
        self.parameters_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 15))
        self.parameters_frame.columnconfigure(0, weight=1)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.create_all_parameter_elements()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self._update_ui_for_transform("–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ")
    
    def create_all_parameter_elements(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        # –†–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.mode_label = ttk.Label(self.parameters_frame, text="–†–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", style='Modern.TLabel')
        self.mode_combo = ttk.Combobox(
            self.parameters_frame, 
            textvariable=self.mode_var,
            values=["–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", "–í—Ä—É—á–Ω—É—é"], 
            state="readonly", 
            style='Modern.TCombobox',
            width=15
        )
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç c
        self.c_label = ttk.Label(self.parameters_frame, text="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç c:", style='Modern.TLabel')
        self.c_entry = ttk.Entry(self.parameters_frame, textvariable=self.c_var, 
                                style='Modern.TEntry', width=15)
        
        # –ì–∞–º–º–∞
        self.gamma_label = ttk.Label(self.parameters_frame, text="–ì–∞–º–º–∞ Œ≥:", style='Modern.TLabel')
        self.gamma_entry = ttk.Entry(self.parameters_frame, textvariable=self.gamma_var, 
                                    style='Modern.TEntry', width=15)
        
        # –†–µ–∂–∏–º –ø–æ—Ä–æ–≥–∞
        self.threshold_mode_label = ttk.Label(self.parameters_frame, text="–†–µ–∂–∏–º –ø–æ—Ä–æ–≥–∞:", style='Modern.TLabel')
        self.threshold_mode_combo = ttk.Combobox(
            self.parameters_frame, 
            textvariable=self.threshold_mode_var,
            values=["–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π", "–ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ"], 
            state="readonly", 
            style='Modern.TCombobox',
            width=15
        )
        
        # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        self.threshold_label = ttk.Label(self.parameters_frame, text="–ü–æ—Ä–æ–≥:", style='Modern.TLabel')
        self.threshold_entry = ttk.Entry(self.parameters_frame, textvariable=self.threshold_var, 
                                        style='Modern.TEntry', width=15)
        
        # –ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        self.preset_label = ttk.Label(self.parameters_frame, text="–ó–∞–≥–æ—Ç–æ–≤–∫–∞:", style='Modern.TLabel')
        self.preset_combo = ttk.Combobox(
            self.parameters_frame, 
            textvariable=self.preset_var,
            values=["–û—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–π (64)", "–°–≤–µ—Ç–ª—ã–π (96)", "–°—Ä–µ–¥–Ω–∏–π (128)", 
                   "–¢–µ–º–Ω—ã–π (160)", "–û—á–µ–Ω—å —Ç–µ–º–Ω—ã–π (192)", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–µ–º–Ω—ã–π (224)"],
            state="readonly", 
            style='Modern.TCombobox',
            width=20
        )
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã—Ä–µ–∑–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π
        self.min_brightness_label = ttk.Label(self.parameters_frame, text="–ú–∏–Ω. —è—Ä–∫–æ—Å—Ç—å:", style='Modern.TLabel')
        self.min_brightness_entry = ttk.Entry(self.parameters_frame, textvariable=self.min_brightness_var, 
                                             style='Modern.TEntry', width=15)
        
        self.max_brightness_label = ttk.Label(self.parameters_frame, text="–ú–∞–∫—Å. —è—Ä–∫–æ—Å—Ç—å:", style='Modern.TLabel')
        self.max_brightness_entry = ttk.Entry(self.parameters_frame, textvariable=self.max_brightness_var, 
                                             style='Modern.TEntry', width=15)
        
        self.outside_mode_label = ttk.Label(self.parameters_frame, text="–†–µ–∂–∏–º –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:", style='Modern.TLabel')
        self.outside_mode_combo = ttk.Combobox(
            self.parameters_frame, 
            textvariable=self.outside_mode_var,
            values=["–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞", "–ò—Å—Ö–æ–¥–Ω–æ–µ"], 
            state="readonly", 
            style='Modern.TCombobox',
            width=15
        )
        
        self.constant_value_label = ttk.Label(self.parameters_frame, text="–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞:", style='Modern.TLabel')
        self.constant_value_entry = ttk.Entry(self.parameters_frame, textvariable=self.constant_value_var, 
                                            style='Modern.TEntry', width=15)
    
    def create_control_buttons(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        buttons_frame = ttk.Frame(self.settings_container, style='Modern.TFrame')
        buttons_frame.grid(row=2, column=0, sticky=(tk.W, tk.E))
        buttons_frame.columnconfigure(0, weight=1)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        self.apply_button = ttk.Button(buttons_frame, 
                                     text="‚ú® –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", 
                                     style='Modern.TButton',
                                     command=self.apply_transform)
        self.apply_button.grid(row=0, column=0, sticky=(tk.W, tk.E))
    
    def _setup_bindings(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π."""
        self.transform_type_var.trace_add('write', self._on_transform_type_change)
        self.mode_var.trace_add('write', self._on_mode_change)
        self.threshold_mode_var.trace_add('write', self._on_threshold_mode_change)
        self.preset_var.trace_add('write', self._on_preset_change)
        self.outside_mode_var.trace_add('write', self._on_outside_mode_change)
    
    def _on_transform_type_change(self, *args):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
        transform_type = self.transform_type_var.get()
        self._update_ui_for_transform(transform_type)
        self._update_description(transform_type)
        self.on_transform_change(transform_type)
    
    def _on_mode_change(self, *args):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        transform_type = self.transform_type_var.get()
        mode = self.mode_var.get()
        self._update_ui_for_mode(transform_type, mode)
    
    def _on_threshold_mode_change(self, *args):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ—Ä–æ–≥–∞."""
        mode = self.threshold_mode_var.get()
        self._update_ui_for_threshold_mode(mode)
    
    def _on_preset_change(self, *args):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞."""
        preset = self.preset_var.get()
        threshold = self._get_threshold_from_preset(preset)
        self.threshold_var.set(str(threshold))
    
    def _on_outside_mode_change(self, *args):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏–∫—Å–µ–ª–µ–π –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
        mode = self.outside_mode_var.get()
        self._update_ui_for_outside_mode(mode)
    
    def _update_description(self, transform_type: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
        descriptions = {
            "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ": "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –¥–µ—Ç–∞–ª–µ–π –≤ —Ç–µ–º–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
            "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ": "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≥–∞–º–º–∞.",
            "–ë–∏–Ω–∞—Ä–Ω–æ–µ": "–ë–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.",
            "–í—ã—Ä–µ–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π": "–í—ã—Ä–µ–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π –≤—ã–¥–µ–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —è—Ä–∫–æ—Å—Ç–µ–π –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
        }
        
        self.description_label.configure(text=descriptions.get(transform_type, ""))
    
    def _update_ui_for_transform(self, transform_type: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
        # –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        self._hide_all_elements()
        
        if transform_type == "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ":
            self._show_power_transform_elements()
        elif transform_type == "–ë–∏–Ω–∞—Ä–Ω–æ–µ":
            self._show_binary_transform_elements()
        elif transform_type == "–í—ã—Ä–µ–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π":
            self._show_brightness_range_elements()
        else:  # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ
            self._show_logarithmic_transform_elements()
    
    def _update_ui_for_mode(self, transform_type: str, mode: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
        if transform_type == "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ":
            if mode == "–í—Ä—É—á–Ω—É—é":
                self.gamma_label.grid(row=2, column=0, sticky=tk.W, pady=(5, 0))
                self.gamma_entry.grid(row=2, column=1, padx=(5, 0), pady=(5, 0))
            else:
                self.gamma_label.grid_remove()
                self.gamma_entry.grid_remove()
        elif transform_type == "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ":
            if mode == "–í—Ä—É—á–Ω—É—é":
                self.c_label.grid(row=2, column=0, sticky=tk.W, pady=(5, 0))
                self.c_entry.grid(row=2, column=1, padx=(5, 0), pady=(5, 0))
            else:
                self.c_label.grid_remove()
                self.c_entry.grid_remove()
    
    def _update_ui_for_threshold_mode(self, mode: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ—Ä–æ–≥–∞."""
        if mode == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π":
            self.threshold_label.grid(row=2, column=0, sticky=tk.W, pady=(5, 0))
            self.threshold_entry.grid(row=2, column=1, padx=(5, 0), pady=(5, 0))
            self.preset_label.grid_remove()
            self.preset_combo.grid_remove()
        else:  # –ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ
            self.threshold_label.grid_remove()
            self.threshold_entry.grid_remove()
            self.preset_label.grid(row=2, column=0, sticky=tk.W, pady=(5, 0))
            self.preset_combo.grid(row=2, column=1, padx=(5, 0), pady=(5, 0))
    
    def _update_ui_for_outside_mode(self, mode: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏–∫—Å–µ–ª–µ–π –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
        if mode == "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞":
            self.constant_value_label.grid(row=4, column=0, sticky=tk.W, pady=(5, 0))
            self.constant_value_entry.grid(row=4, column=1, padx=(5, 0), pady=(5, 0))
        else:  # –ò—Å—Ö–æ–¥–Ω–æ–µ
            self.constant_value_label.grid_remove()
            self.constant_value_entry.grid_remove()
    
    def _hide_all_elements(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        elements = [
            self.mode_label, self.mode_combo,
            self.c_label, self.c_entry,
            self.gamma_label, self.gamma_entry,
            self.threshold_label, self.threshold_entry,
            self.threshold_mode_label, self.threshold_mode_combo,
            self.preset_label, self.preset_combo,
            self.min_brightness_label, self.min_brightness_entry,
            self.max_brightness_label, self.max_brightness_entry,
            self.outside_mode_label, self.outside_mode_combo,
            self.constant_value_label, self.constant_value_entry
        ]
        
        for element in elements:
            element.grid_remove()
    
    def _show_logarithmic_transform_elements(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
        self.mode_label.grid(row=0, column=0, sticky=tk.W, pady=(5, 0))
        self.mode_combo.grid(row=0, column=1, padx=(5, 0), pady=(5, 0))
        self._update_ui_for_mode("–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ", self.mode_var.get())
    
    def _show_power_transform_elements(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
        self.mode_label.grid(row=0, column=0, sticky=tk.W, pady=(5, 0))
        self.mode_combo.grid(row=0, column=1, padx=(5, 0), pady=(5, 0))
        self._update_ui_for_mode("–°—Ç–µ–ø–µ–Ω–Ω–æ–µ", self.mode_var.get())
    
    def _show_binary_transform_elements(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
        self.threshold_mode_label.grid(row=0, column=0, sticky=tk.W, pady=(5, 0))
        self.threshold_mode_combo.grid(row=0, column=1, padx=(5, 0), pady=(5, 0))
        self._update_ui_for_threshold_mode(self.threshold_mode_var.get())
    
    def _show_brightness_range_elements(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã—Ä–µ–∑–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π."""
        self.min_brightness_label.grid(row=0, column=0, sticky=tk.W, pady=(5, 0))
        self.min_brightness_entry.grid(row=0, column=1, padx=(5, 0), pady=(5, 0))
        self.max_brightness_label.grid(row=1, column=0, sticky=tk.W, pady=(5, 0))
        self.max_brightness_entry.grid(row=1, column=1, padx=(5, 0), pady=(5, 0))
        self.outside_mode_label.grid(row=2, column=0, sticky=tk.W, pady=(5, 0))
        self.outside_mode_combo.grid(row=2, column=1, padx=(5, 0), pady=(5, 0))
        self._update_ui_for_outside_mode(self.outside_mode_var.get())
    
    def _get_threshold_from_preset(self, preset: str) -> int:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–≥–æ—Ç–æ–≤–∫–∏."""
        if "–û—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–π" in preset:
            return 64
        elif "–°–≤–µ—Ç–ª—ã–π" in preset:
            return 96
        elif "–°—Ä–µ–¥–Ω–∏–π" in preset:
            return 128
        elif "–¢–µ–º–Ω—ã–π" in preset:
            return 160
        elif "–û—á–µ–Ω—å —Ç–µ–º–Ω—ã–π" in preset:
            return 192
        elif "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–µ–º–Ω—ã–π" in preset:
            return 224
        else:
            return 128
    
    def get_transform_parameters(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.
        
        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        transform_type = self.transform_type_var.get()
        params = {'transform_type': transform_type}
        
        if transform_type == "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ":
            mode = self.mode_var.get()
            params['mode'] = mode
            if mode == "–í—Ä—É—á–Ω—É—é":
                try:
                    params['c'] = self.validator.validate_positive_float(self.c_var.get(), "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç c")
                except ValueError as e:
                    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞: {e}")
        
        elif transform_type == "–°—Ç–µ–ø–µ–Ω–Ω–æ–µ":
            mode = self.mode_var.get()
            params['mode'] = mode
            if mode == "–í—Ä—É—á–Ω—É—é":
                try:
                    params['gamma'] = self.validator.validate_positive_float(self.gamma_var.get(), "–≥–∞–º–º–∞")
                except ValueError as e:
                    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–º–º—ã: {e}")
        
        elif transform_type == "–ë–∏–Ω–∞—Ä–Ω–æ–µ":
            mode = self.threshold_mode_var.get()
            params['threshold_mode'] = mode
            if mode == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π":
                try:
                    params['threshold'] = self.validator.validate_threshold(self.threshold_var.get())
                except ValueError as e:
                    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞: {e}")
            else:  # –ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ
                params['threshold'] = self._get_threshold_from_preset(self.preset_var.get())
        
        elif transform_type == "–í—ã—Ä–µ–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —è—Ä–∫–æ—Å—Ç–µ–π":
            try:
                min_brightness, max_brightness = self.validator.validate_brightness_range(
                    self.min_brightness_var.get(), 
                    self.max_brightness_var.get()
                )
                params['min_brightness'] = min_brightness
                params['max_brightness'] = max_brightness
                params['outside_mode'] = self.outside_mode_var.get()
                
                if params['outside_mode'] == "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞":
                    params['constant_value'] = self.validator.validate_threshold(self.constant_value_var.get())
            except ValueError as e:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")
        
        return params
    
    def set_apply_command(self, command: Callable):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è."""
        self.apply_button.configure(command=command)
    
    def apply_transform(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ."""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        pass
