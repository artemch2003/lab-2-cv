"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è.
"""

import tkinter as tk
from tkinter import ttk
from typing import Callable, Dict, Any, Optional
import logging

from utils.validators import ParameterValidator

logger = logging.getLogger(__name__)


class ModernSmoothingSettings:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è."""
    
    def __init__(self, parent_frame: ttk.Frame, on_filter_change: Callable[[str], None]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è.
        
        Args:
            parent_frame: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º
            on_filter_change: Callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        """
        self.parent_frame = parent_frame
        self.on_filter_change = on_filter_change
        self.validator = ParameterValidator()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        self.filter_type_var = tk.StringVar(value="–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 3x3")
        self.kernel_size_var = tk.StringVar(value="3x3")
        
        self._create_widgets()
        self._setup_bindings()
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        settings_container = ttk.LabelFrame(self.parent_frame, 
                                          text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è", 
                                          style='Modern.TLabelFrame',
                                          padding="15")
        settings_container.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(10, 0))
        settings_container.columnconfigure(0, weight=1)
        
        # –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞
        self.create_filter_type_section(settings_container)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞
        self.create_parameters_section(settings_container)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_control_buttons(settings_container)
    
    def create_filter_type_section(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞."""
        type_frame = ttk.LabelFrame(parent, 
                                  text="–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞", 
                                  style='Modern.TLabelFrame',
                                  padding="10")
        type_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 15))
        type_frame.columnconfigure(0, weight=1)
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        filter_combo = ttk.Combobox(
            type_frame, 
            textvariable=self.filter_type_var,
            values=[
                "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 3x3",
                "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 5x5", 
                "–ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 3x3",
                "–ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 5x5"
            ], 
            state="readonly", 
            style='Modern.TCombobox',
            font=('Segoe UI', 10)
        )
        filter_combo.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        self.description_label = ttk.Label(type_frame, 
                                          text="–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 3x3 –ø—Ä–∏–º–µ–Ω—è–µ—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ –æ–∫–Ω—É 3x3 –ø–∏–∫—Å–µ–ª—è –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                                          style='Modern.TLabel',
                                          wraplength=300,
                                          justify=tk.LEFT)
        self.description_label.grid(row=1, column=0, sticky=(tk.W, tk.E))
    
    def create_parameters_section(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞."""
        self.parameters_frame = ttk.LabelFrame(parent, 
                                             text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", 
                                             style='Modern.TLabelFrame',
                                             padding="10")
        self.parameters_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(0, 15))
        self.parameters_frame.columnconfigure(0, weight=1)
        
        # –†–∞–∑–º–µ—Ä —è–¥—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        self.kernel_size_label = ttk.Label(self.parameters_frame, 
                                          text="–†–∞–∑–º–µ—Ä —è–¥—Ä–∞:", 
                                          style='Modern.TLabel')
        self.kernel_size_label.grid(row=0, column=0, sticky=tk.W, pady=(5, 0))
        
        self.kernel_size_display = ttk.Label(self.parameters_frame, 
                                           textvariable=self.kernel_size_var,
                                           style='Modern.TLabel',
                                           font=('Segoe UI', 10, 'bold'))
        self.kernel_size_display.grid(row=0, column=1, sticky=tk.W, padx=(10, 0), pady=(5, 0))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å—Ç—Ä–µ
        self.info_label = ttk.Label(self.parameters_frame, 
                                  text="–§–∏–ª—å—Ç—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —è–¥—Ä–∞.",
                                  style='Modern.TLabel',
                                  wraplength=300,
                                  justify=tk.LEFT)
        self.info_label.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))
    
    def create_control_buttons(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        buttons_frame = ttk.Frame(parent, style='Modern.TFrame')
        buttons_frame.grid(row=2, column=0, sticky=(tk.W, tk.E))
        buttons_frame.columnconfigure(0, weight=1)
        buttons_frame.columnconfigure(1, weight=1)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        self.apply_button = ttk.Button(buttons_frame, 
                                     text="‚ú® –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", 
                                     style='Modern.TButton',
                                     command=self.apply_filter)
        self.apply_button.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.preview_button = ttk.Button(buttons_frame, 
                                        text="üëÅ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä", 
                                        style='Modern.TButton',
                                        command=self.preview_filter)
        self.preview_button.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(5, 0))
    
    def _setup_bindings(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π."""
        self.filter_type_var.trace_add('write', self._on_filter_type_change)
    
    def _on_filter_type_change(self, *args):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞."""
        filter_type = self.filter_type_var.get()
        self._update_ui_for_filter(filter_type)
        self._update_description(filter_type)
        self.on_filter_change(filter_type)
    
    def _update_description(self, filter_type: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞."""
        descriptions = {
            "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 3x3": "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 3x3 –ø—Ä–∏–º–µ–Ω—è–µ—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ –æ–∫–Ω—É 3x3 –ø–∏–∫—Å–µ–ª—è –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
            "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 5x5": "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 5x5 –ø—Ä–∏–º–µ–Ω—è–µ—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ –æ–∫–Ω—É 5x5 –ø–∏–∫—Å–µ–ª—è –¥–ª—è –±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è.",
            "–ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 3x3": "–ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 3x3 –∑–∞–º–µ–Ω—è–µ—Ç –∫–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å –º–µ–¥–∏–∞–Ω–æ–π –∑–Ω–∞—á–µ–Ω–∏–π –≤ –æ–∫–Ω–µ 3x3. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –ø—Ä–æ—Ç–∏–≤ –∏–º–ø—É–ª—å—Å–Ω–æ–≥–æ —à—É–º–∞.",
            "–ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 5x5": "–ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä 5x5 –∑–∞–º–µ–Ω—è–µ—Ç –∫–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å –º–µ–¥–∏–∞–Ω–æ–π –∑–Ω–∞—á–µ–Ω–∏–π –≤ –æ–∫–Ω–µ 5x5. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–µ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞."
        }
        
        self.description_label.configure(text=descriptions.get(filter_type, ""))
    
    def _update_ui_for_filter(self, filter_type: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç UI –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞."""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —è–¥—Ä–∞
        if "3x3" in filter_type:
            self.kernel_size_var.set("3x3")
        elif "5x5" in filter_type:
            self.kernel_size_var.set("5x5")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π" in filter_type:
            self.info_label.configure(text="–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω—è–µ—Ç —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ –æ–∫–Ω—É –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        elif "–ú–µ–¥–∏–∞–Ω–Ω—ã–π" in filter_type:
            self.info_label.configure(text="–ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∑–∞–º–µ–Ω—è–µ—Ç –∫–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å –º–µ–¥–∏–∞–Ω–æ–π –∑–Ω–∞—á–µ–Ω–∏–π –≤ –æ–∫–Ω–µ. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –ø—Ä–æ—Ç–∏–≤ –∏–º–ø—É–ª—å—Å–Ω–æ–≥–æ —à—É–º–∞.")
    
    def get_filter_parameters(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞.
        
        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        filter_type = self.filter_type_var.get()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä —è–¥—Ä–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        if "3x3" in filter_type:
            kernel_size = 3
        elif "5x5" in filter_type:
            kernel_size = 5
        else:
            kernel_size = 3
        
        params = {
            'transform_type': filter_type,
            'kernel_size': kernel_size
        }
        
        return params
    
    def set_apply_command(self, command: Callable):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è."""
        self.apply_button.configure(command=command)
    
    def apply_filter(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä."""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        pass
    
    def preview_filter(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–∞."""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        pass
