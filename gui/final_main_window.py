"""
–§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ.
"""

import tkinter as tk
from tkinter import ttk

from constants import MESSAGES
from gui.components.ui_factory import UIFactory
from gui.components.base_components import BaseCanvas, BaseInfoPanel
from gui.styles.style_manager import StyleManager
from gui.windows.window_manager import WindowManager
from gui.parameters.parameter_manager import ParameterManager
from gui.quality.quality_manager import QualityManager
from gui.image.image_manager import ImageManager
from gui.events.event_manager import EventManager


class FinalMainWindow:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞."""
    
    def __init__(self, root):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞."""
        self.root = root
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.style_manager = StyleManager()
        self.window_manager = WindowManager(root)
        self.ui_factory = UIFactory()
        self.image_manager = ImageManager(self.window_manager)
        self.parameter_manager = None
        self.quality_manager = None
        self.event_manager = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
        self.window_manager.setup_main_window()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.main_container = self.create_interface()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.initialize_managers()
    
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root, style='Modern.TFrame', padding="0")
        main_container.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.create_header(main_container)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å
        self.create_workspace(main_container)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–µ—Ä–µ–¥–∞–µ–º image_manager –¥–ª—è –∞–≤—Ç–æ-—Ä–∞—Å—á–µ—Ç–∞ –∫–∞—Ä—Ç—ã)
        self.quality_manager = QualityManager(main_container, self.window_manager, self.image_manager)
        
        # –ü–∞–Ω–µ–ª—å –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        self.create_quality_panel(main_container)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.create_bottom_panel(main_container)
        
        return main_container
    
    def initialize_managers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.parameter_manager = ParameterManager(self.params_frame)
        self.parameter_manager.pack()
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ create_interface
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–±—ã—Ç–∏–π
        self.event_manager = EventManager(
            self.parameter_manager,
            self.image_manager,
            self.quality_manager,
            self.update_info
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        current_transform = self.transform_combo.get()
        self.event_manager.on_transform_change(current_transform, self.desc_text)
    
    def create_quality_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞."""
        return self.quality_manager.create_quality_panel(parent)
    
    def create_header(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        header_frame = ttk.Frame(parent, style='Modern.TFrame')
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        title_label = ttk.Label(header_frame, text="Photo Editor Pro", style='Title.TLabel')
        title_label.pack(side=tk.LEFT, padx=20, pady=10)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(header_frame, style='Modern.TFrame')
        control_frame.pack(side=tk.RIGHT, padx=20, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        load_btn = self.ui_factory.create_button(control_frame, "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å", self.load_image)
        load_btn.pack(side=tk.LEFT, padx=5)
        
        save_btn = self.ui_factory.create_button(control_frame, "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self.save_image)
        save_btn.pack(side=tk.LEFT, padx=5)
        
        reset_btn = self.ui_factory.create_button(control_frame, "üîÑ –°–±—Ä–æ—Å", self.reset_image)
        reset_btn.pack(side=tk.LEFT, padx=5)
    
    def create_workspace(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å."""
        workspace_frame = ttk.Frame(parent, style='Modern.TFrame')
        workspace_frame.pack(fill=tk.BOTH, expand=True, padx=20)
        workspace_frame.columnconfigure(0, weight=2)
        workspace_frame.columnconfigure(1, weight=1)
        
        # –û–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.create_image_area(workspace_frame)
        
        # –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.create_settings_panel(workspace_frame)
    
    def create_image_area(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        display_frame = self.ui_factory.create_label_frame(parent, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", padding="10")
        display_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        display_frame.columnconfigure(0, weight=1)
        display_frame.columnconfigure(1, weight=1)
        
        # –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        original_frame = self.ui_factory.create_label_frame(display_frame.frame, "–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", padding="5")
        original_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))
        
        self.original_canvas = BaseCanvas(original_frame.frame)
        self.original_canvas.grid(sticky=(tk.W, tk.E, tk.N, tk.S))
        self.original_canvas.display_placeholder(MESSAGES['load_placeholder'])
        
        # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        processed_frame = self.ui_factory.create_label_frame(display_frame.frame, "–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", padding="5")
        processed_frame.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(5, 0))
        
        self.processed_canvas = BaseCanvas(processed_frame.frame)
        self.processed_canvas.grid(sticky=(tk.W, tk.E, tk.N, tk.S))
        self.processed_canvas.display_placeholder(MESSAGES['processed_placeholder'])
    
    def create_settings_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        settings_frame = self.ui_factory.create_label_frame(parent, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", padding="15")
        settings_frame.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(10, 0))
        
        # –¢–∏–ø –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        ttk.Label(settings_frame.frame, text="–¢–∏–ø –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", style='Modern.TLabel').pack(anchor=tk.W, pady=(0, 5))
        self.transform_combo = self.ui_factory.create_transform_combobox(settings_frame.frame)
        self.transform_combo.pack(fill=tk.X, pady=(0, 10))
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–ø—Ä–æ–ø—É—Å–∫–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã)
        try:
            # –ù–∞–π–¥—ë–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–∏–º–≤–æ–ª–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–∏—Ä–µ
            for val in self.transform_combo.get().split():
                pass
        except Exception:
            pass
        self.transform_combo.set("–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ")
        self.transform_combo.bind("<<ComboboxSelected>>", self.on_transform_change)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        self.desc_text = self.ui_factory.create_text(settings_frame.frame, height=4, width=30)
        self.desc_text.pack(fill=tk.X, pady=(0, 10))
        self.desc_text.insert(1.0, "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –¥–µ—Ç–∞–ª–µ–π –≤ —Ç–µ–º–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        self.desc_text.configure(state=tk.DISABLED)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.params_frame = ttk.Frame(settings_frame.frame, style='Modern.TFrame')
        self.params_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        apply_btn = self.ui_factory.create_button(settings_frame.frame, "‚ú® –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", self.apply_transform)
        apply_btn.pack(fill=tk.X, pady=(10, 0))
    
    def create_quality_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞."""
        self.quality_panel = self.quality_manager.create_quality_panel(parent)
        # –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–æ–∫ –∫ –º–µ—Ç–æ–¥–∞–º –æ–∫–Ω–∞,
        # —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–∏—Å—å –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if hasattr(self.quality_manager, 'show_diff_map_btn'):
            self.quality_manager.show_diff_map_btn.configure(command=self.show_difference_map)
    
    def create_bottom_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å."""
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = self.ui_factory.create_label_frame(parent, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding="10")
        info_frame.pack(fill=tk.X, pady=(10, 0), padx=20)
        
        self.info_panel = BaseInfoPanel(info_frame.frame, height=3)
        self.info_panel.pack(fill=tk.X)
        self.info_panel.update_info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:\n{MESSAGES['no_image']}")
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value=MESSAGES['ready'])
        status_bar = ttk.Label(parent, textvariable=self.status_var, style='Status.TLabel')
        status_bar.pack(fill=tk.X, pady=(10, 0), padx=20)
    
    def load_image(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        success, message = self.event_manager.on_load_image(self.original_canvas)
        if success:
            self.status_var.set(message)
        else:
            self.status_var.set("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    def save_image(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        success, message = self.event_manager.on_save_image()
        if success:
            self.status_var.set(message)
        else:
            self.status_var.set("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    def reset_image(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."""
        success, message = self.event_manager.on_reset_image(self.processed_canvas)
        if success:
            self.status_var.set(message)
        else:
            self.status_var.set("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    def apply_transform(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ."""
        transform_type = self.transform_combo.get()
        self.status_var.set(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {transform_type.lower()} –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è...")
        
        success, message = self.event_manager.on_apply_transform(transform_type, self.processed_canvas)
        if success:
            self.status_var.set(message)
        else:
            self.status_var.set("–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
    
    def on_transform_change(self, event=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
        transform_type = self.transform_combo.get()
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        try:
            from gui.parameters.parameter_manager import ParameterManager
            if ParameterManager.is_group_header(self.parameter_manager, transform_type):
                return
        except Exception:
            pass
        self.event_manager.on_transform_change(transform_type, self.desc_text)
    
    def update_info(self, message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å."""
        self.info_panel.update_info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:\n{message}")
    
    def analyze_quality(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        self.event_manager.on_analyze_quality()
    
    def show_difference_map(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É —Ä–∞–∑–Ω–æ—Å—Ç–∏."""
        self.event_manager.on_show_difference_map()
    
    def compare_filters(self):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        self.event_manager.on_compare_filters()
    
    def compare_sharpness_filters(self):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ä–µ–∑–∫–æ—Å—Ç–∏."""
        self.event_manager.on_compare_sharpness_filters()
