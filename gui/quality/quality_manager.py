"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤.
"""

import tkinter as tk
from tkinter import ttk
from PIL import Image
from constants import AVAILABLE_FILTERS, SHARPNESS_KERNEL_SIZES, SHARPNESS_LAMBDA_VALUES
from gui.components.ui_factory import UIFactory
from gui.windows.window_manager import WindowManager


class QualityManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    
    def __init__(self, parent, window_manager):
        self.parent = parent
        self.window_manager = window_manager
        self.ui_factory = UIFactory()
        self.quality_assessor = None
        self.quality_metrics = None
        self.difference_map = None
    
    def create_quality_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞."""
        quality_frame = self.ui_factory.create_label_frame(
            parent, "–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", padding="15"
        )
        quality_frame.pack(fill=tk.X, pady=(10, 0), padx=20)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º
        self._create_quality_buttons(quality_frame.frame)
        
        # –û–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã —Ä–∞–∑–Ω–æ—Å—Ç–∏
        self._create_difference_map_area(quality_frame.frame)
        
        return quality_frame
    
    def _create_quality_buttons(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º."""
        buttons_frame = ttk.Frame(parent, style='Modern.TFrame')
        buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        self.analyze_quality_btn = self.ui_factory.create_button(
            buttons_frame, "üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞", self.analyze_quality
        )
        self.analyze_quality_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç—ã —Ä–∞–∑–Ω–æ—Å—Ç–∏
        self.show_diff_map_btn = self.ui_factory.create_button(
            buttons_frame, "üó∫Ô∏è –ö–∞—Ä—Ç–∞ —Ä–∞–∑–Ω–æ—Å—Ç–∏", self.show_difference_map
        )
        self.show_diff_map_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.compare_filters_btn = self.ui_factory.create_button(
            buttons_frame, "‚öñÔ∏è –°—Ä–∞–≤–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", self.compare_filters
        )
        self.compare_filters_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–µ–∑–∫–æ—Å—Ç–∏
        self.compare_sharpness_btn = self.ui_factory.create_button(
            buttons_frame, "üîç –°—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑–∫–æ—Å—Ç—å", self.compare_sharpness_filters
        )
        self.compare_sharpness_btn.pack(side=tk.LEFT, padx=5)
    
    def _create_difference_map_area(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã —Ä–∞–∑–Ω–æ—Å—Ç–∏."""
        diff_frame = self.ui_factory.create_label_frame(
            parent, "–ö–∞—Ä—Ç–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Ä–∞–∑–Ω–æ—Å—Ç–∏", padding="5"
        )
        diff_frame.pack(fill=tk.BOTH, expand=True)
        
        self.diff_canvas = tk.Canvas(
            diff_frame.frame, 
            bg="#1e1e1e", 
            highlightthickness=0, 
            height=200
        )
        self.diff_canvas.pack(fill=tk.BOTH, expand=True)
        self.diff_canvas.create_text(
            200, 100, 
            text="–ù–∞–∂–º–∏—Ç–µ '–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç—ã —Ä–∞–∑–Ω–æ—Å—Ç–∏", 
            fill="#666666", 
            font=("Segoe UI", 10), 
            justify=tk.CENTER
        )
    
    def analyze_quality(self, original_image, processed_image, update_info_callback):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        if not original_image or not processed_image:
            self.window_manager.show_warning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
            )
            return
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ü–µ–Ω—â–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
            from image_processing.quality_assessment import QualityAssessment
            self.quality_assessor = QualityAssessment()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ numpy arrays
            import numpy as np
            original_array = np.array(original_image)
            processed_array = np.array(processed_image)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            self.quality_metrics = self.quality_assessor.compute_quality_metrics(
                original_array, processed_array
            )
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–∞—Ä—Ç—É —Ä–∞–∑–Ω–æ—Å—Ç–∏
            self.difference_map = self.quality_assessor.compute_absolute_difference_map(
                original_array, processed_array
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É —Ä–∞–∑–Ω–æ—Å—Ç–∏
            self.display_difference_map()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            quality_report = self.quality_assessor.format_quality_report(self.quality_metrics)
            update_info_callback(f"–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω\n{quality_report}")
            
        except Exception as e:
            self.window_manager.show_error("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ: {e}")
    
    def display_difference_map(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç—É —Ä–∞–∑–Ω–æ—Å—Ç–∏."""
        if self.difference_map is None:
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞—Ä—Ç—ã —Ä–∞–∑–Ω–æ—Å—Ç–∏
            visualization = self.quality_assessor.create_visualization_map(self.difference_map, 'hot')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            if len(visualization.shape) == 3:
                diff_image = Image.fromarray(visualization)
            else:
                diff_image = Image.fromarray(visualization, mode='L')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            from constants import DISPLAY_IMAGE_SIZE
            display_image = diff_image.copy()
            display_image.thumbnail(DISPLAY_IMAGE_SIZE, Image.Resampling.LANCZOS)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PhotoImage
            photo = ImageTk.PhotoImage(display_image)
            
            # –û—á–∏—â–∞–µ–º canvas –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É
            self.diff_canvas.delete("all")
            self.diff_canvas.create_image(200, 100, image=photo)
            self.diff_canvas.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
            
        except Exception as e:
            self.window_manager.show_error("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–∞—Ä—Ç—É —Ä–∞–∑–Ω–æ—Å—Ç–∏: {e}")
    
    def show_difference_map(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É —Ä–∞–∑–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ."""
        if self.difference_map is None:
            self.window_manager.show_warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
            diff_window = self.window_manager.create_diff_window()
            
            # –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            canvas = self.window_manager.create_canvas_for_window(diff_window)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            visualization = self.quality_assessor.create_visualization_map(self.difference_map, 'hot')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            if len(visualization.shape) == 3:
                diff_image = Image.fromarray(visualization)
            else:
                diff_image = Image.fromarray(visualization, mode='L')
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É
            self.window_manager.display_image_in_canvas(canvas, diff_image)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            info_text = f"–°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å: {self.quality_metrics['mean_difference']:.2f}\n"
            info_text += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å: {self.quality_metrics['max_difference']}\n"
            info_text += f"–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {self.quality_metrics['quality_rating']}"
            
            info_label = tk.Label(
                diff_window, 
                text=info_text, 
                bg="#2b2b2b", 
                fg="#ffffff", 
                font=("Segoe UI", 10)
            )
            info_label.pack(pady=5)
            
        except Exception as e:
            self.window_manager.show_error("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É —Ä–∞–∑–Ω–æ—Å—Ç–∏: {e}")
    
    def compare_filters(self, original_image, update_info_callback):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        if not original_image:
            self.window_manager.show_warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            compare_window = self.window_manager.create_comparison_window()
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            selection_frame = self.ui_factory.create_label_frame(
                compare_window, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", padding="10"
            )
            selection_frame.pack(fill=tk.X, padx=10, pady=10)
            
            # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            self.selected_filters = self.ui_factory.create_filter_checkboxes(
                selection_frame, AVAILABLE_FILTERS
            )
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            compare_btn = self.ui_factory.create_button(
                selection_frame, 
                "üîÑ –°—Ä–∞–≤–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã", 
                lambda: self.run_filter_comparison(compare_window, original_image, update_info_callback)
            )
            compare_btn.grid(row=len(AVAILABLE_FILTERS)//2 + 1, column=0, columnspan=2, pady=10)
            
        except Exception as e:
            self.window_manager.show_error("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
    
    def run_filter_comparison(self, window, original_image, update_info_callback):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            selected = [name for name, var in self.selected_filters.items() if var.get()]
            
            if not selected:
                self.window_manager.show_warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä")
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ü–µ–Ω—â–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
            from image_processing.quality_assessment import FilterQualityComparator
            comparator = FilterQualityComparator()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            import numpy as np
            from image_processing.factories.transform_factory import TransformFactory
            
            original_array = np.array(original_image)
            filter_results = {}
            
            for filter_name in selected:
                try:
                    transform = TransformFactory.create_transform(filter_name)
                    processed_array = transform.apply(original_array)
                    filter_results[filter_name] = processed_array
                except Exception as e:
                    self.window_manager.show_error("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä {filter_name}: {e}")
                    return
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            comparison_results = comparator.compare_filters(original_array, filter_results)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.display_comparison_results(window, comparison_results, comparator)
            
        except Exception as e:
            self.window_manager.show_error("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: {e}")
    
    def display_comparison_results(self, window, results, comparator):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        try:
            # –û—á–∏—â–∞–µ–º –æ–∫–Ω–æ
            for widget in window.winfo_children():
                if isinstance(widget, ttk.LabelFrame):
                    widget.destroy()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_frame = self.ui_factory.create_label_frame(
                window, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", padding="10"
            )
            results_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            # –û—Ç—á–µ—Ç –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
            report_text = comparator.format_comparison_report()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            text_widget = tk.Text(
                results_frame.frame, 
                wrap=tk.WORD, 
                bg="#3c3c3c", 
                fg="#ffffff", 
                font=("Segoe UI", 9)
            )
            text_widget.pack(fill=tk.BOTH, expand=True)
            text_widget.insert(1.0, report_text)
            text_widget.configure(state=tk.DISABLED)
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_btn = self.ui_factory.create_button(
                results_frame.frame, "–ó–∞–∫—Ä—ã—Ç—å", window.destroy
            )
            close_btn.pack(pady=10)
            
        except Exception as e:
            self.window_manager.show_error("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")
    
    def compare_sharpness_filters(self, original_image, update_info_callback):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ä–µ–∑–∫–æ—Å—Ç–∏."""
        if not original_image:
            self.window_manager.show_warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–µ–∑–∫–æ—Å—Ç–∏
            sharpness_window = self.window_manager.create_sharpness_window()
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            selection_frame = self.ui_factory.create_label_frame(
                sharpness_window, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", padding="10"
            )
            selection_frame.pack(fill=tk.X, padx=10, pady=10)
            
            # –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤ —è–¥–µ—Ä
            ttk.Label(selection_frame.frame, text="–†–∞–∑–º–µ—Ä—ã —è–¥–µ—Ä (k):", style='Modern.TLabel').pack(anchor=tk.W)
            kernel_frame = ttk.Frame(selection_frame.frame, style='Modern.TFrame')
            kernel_frame.pack(fill=tk.X, pady=(5, 10))
            
            self.kernel_vars = self.ui_factory.create_kernel_checkboxes(kernel_frame)
            
            # –í—ã–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π Œª
            ttk.Label(selection_frame.frame, text="–ó–Ω–∞—á–µ–Ω–∏—è Œª:", style='Modern.TLabel').pack(anchor=tk.W)
            lambda_frame = ttk.Frame(selection_frame.frame, style='Modern.TFrame')
            lambda_frame.pack(fill=tk.X, pady=(5, 10))
            
            self.lambda_vars = self.ui_factory.create_lambda_checkboxes(lambda_frame)
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            compare_btn = self.ui_factory.create_button(
                selection_frame, 
                "üîç –°—Ä–∞–≤–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã —Ä–µ–∑–∫–æ—Å—Ç–∏", 
                lambda: self.run_sharpness_comparison(sharpness_window, original_image, update_info_callback)
            )
            compare_btn.pack(pady=10)
            
        except Exception as e:
            self.window_manager.show_error("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
    
    def run_sharpness_comparison(self, window, original_image, update_info_callback):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–µ–∑–∫–æ—Å—Ç–∏."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            selected_kernels = [k for k, var in self.kernel_vars.items() if var.get()]
            selected_lambdas = [lambda_val for lambda_val, var in self.lambda_vars.items() if var.get()]
            
            if not selected_kernels or not selected_lambdas:
                self.window_manager.show_warning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑–º–µ—Ä —è–¥—Ä–∞ –∏ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ Œª"
                )
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä
            from image_processing.sharpness_comparator import SharpnessComparator
            comparator = SharpnessComparator()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ numpy array
            import numpy as np
            original_array = np.array(original_image)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            results = comparator.compare_sharpness_filters(
                original_array, 
                kernel_sizes=selected_kernels, 
                lambda_values=selected_lambdas
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.display_sharpness_comparison_results(window, results, comparator)
            
        except Exception as e:
            self.window_manager.show_error("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: {e}")
    
    def display_sharpness_comparison_results(self, window, results, comparator):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–µ–∑–∫–æ—Å—Ç–∏."""
        try:
            # –û—á–∏—â–∞–µ–º –æ–∫–Ω–æ
            for widget in window.winfo_children():
                if isinstance(widget, ttk.LabelFrame):
                    widget.destroy()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_frame = self.ui_factory.create_label_frame(
                window, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–µ–∑–∫–æ—Å—Ç–∏", padding="10"
            )
            results_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            # –û—Ç—á–µ—Ç –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏
            report_text = comparator.format_comparison_report()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = comparator.get_filter_recommendations()
            report_text += "\n\n" + "\n".join(recommendations)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            text_widget = tk.Text(
                results_frame.frame, 
                wrap=tk.WORD, 
                bg="#3c3c3c", 
                fg="#ffffff", 
                font=("Segoe UI", 9)
            )
            text_widget.pack(fill=tk.BOTH, expand=True)
            text_widget.insert(1.0, report_text)
            text_widget.configure(state=tk.DISABLED)
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_btn = self.ui_factory.create_button(
                results_frame.frame, "–ó–∞–∫—Ä—ã—Ç—å", window.destroy
            )
            close_btn.pack(pady=10)
            
        except Exception as e:
            self.window_manager.show_error("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")
