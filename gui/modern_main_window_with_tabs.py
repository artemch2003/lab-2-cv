"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –≤ —Å—Ç–∏–ª–µ —Ñ–æ—Ç–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞.
–í–∫–ª—é—á–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è.
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import logging
import os
from typing import Optional, Callable
from PIL import Image, ImageTk
import time

from gui.components.modern_image_display import ModernImageDisplay
from gui.components.modern_transform_settings import ModernTransformSettings
from gui.components.modern_smoothing_settings import ModernSmoothingSettings
from gui.components.modern_info_panel import ModernInfoPanel
from gui.components.animations import AnimationManager, LoadingSpinner, ProgressBar
from gui.styles.modern_styles import ModernStyles
from gui.controllers.main_controller import MainController
from di.container import DIContainer
from di.config import create_container

logger = logging.getLogger(__name__)


class ModernMainWindowWithTabs:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –≤ —Å—Ç–∏–ª–µ —Ñ–æ—Ç–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞."""
    
    def __init__(self, root, container: Optional[DIContainer] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞.
        
        Args:
            root: –ö–æ—Ä–Ω–µ–≤–æ–µ –æ–∫–Ω–æ tkinter
            container: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        """
        self.root = root
        self.container = container or create_container()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –∏–Ω–∂–µ–∫—Ü–∏–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from image_processing.interfaces.image_processor_interface import ImageProcessorInterface
        from utils.validators import ParameterValidator
        
        image_processor = self.container.get(ImageProcessorInterface)
        validator = self.container.get(ParameterValidator)
        self.controller = MainController(image_processor, validator)
        
        self.setup_window()
        self.setup_styles()
        self.create_widgets()
        self.setup_controller()
        self.setup_animations()
    
    def setup_animations(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏."""
        self.animation_manager = AnimationManager()
        
    def setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–∫–Ω–∞."""
        self.root.title("Photo Editor Pro - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        self.root.geometry("1400x900")
        self.root.minsize(1200, 800)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            self.root.iconbitmap("icon.ico")
        except:
            pass
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (1400 // 2)
        y = (self.root.winfo_screenheight() // 2) - (900 // 2)
        self.root.geometry(f"1400x900+{x}+{y}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç–∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        self.styles = ModernStyles()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root.configure(bg=self.styles.get_color('bg_primary'))
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root, style='Modern.TFrame', padding="0")
        main_container.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        main_container.columnconfigure(0, weight=1)
        main_container.rowconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.create_header(main_container)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.create_main_workspace(main_container)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.create_bottom_panel(main_container)
    
    def create_header(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        header_frame = ttk.Frame(parent, style='Modern.TFrame')
        header_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        header_frame.columnconfigure(1, weight=1)
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        title_label = ttk.Label(header_frame, 
                               text="Photo Editor Pro", 
                               style='Title.TLabel')
        title_label.grid(row=0, column=0, sticky=tk.W, padx=(20, 0), pady=10)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(header_frame, style='Modern.TFrame')
        control_frame.grid(row=0, column=1, sticky=tk.E, padx=(0, 20), pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.load_btn = ttk.Button(control_frame, 
                                  text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å", 
                                  style='Modern.TButton',
                                  command=self.load_image)
        self.load_btn.grid(row=0, column=0, padx=(0, 10))
        
        self.save_btn = ttk.Button(control_frame, 
                                  text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                                  style='Modern.TButton',
                                  command=self.save_image)
        self.save_btn.grid(row=0, column=1, padx=(0, 10))
        
        self.reset_btn = ttk.Button(control_frame, 
                                   text="üîÑ –°–±—Ä–æ—Å", 
                                   style='Modern.TButton',
                                   command=self.reset_image)
        self.reset_btn.grid(row=0, column=2)
    
    def create_main_workspace(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏."""
        workspace_frame = ttk.Frame(parent, style='Modern.TFrame')
        workspace_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), padx=20)
        workspace_frame.columnconfigure(0, weight=2)
        workspace_frame.columnconfigure(1, weight=1)
        workspace_frame.rowconfigure(1, weight=1)
        
        # –°–æ–∑–¥–∞–µ–º notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(workspace_frame, style='Modern.TNotebook')
        self.notebook.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # –í–∫–ª–∞–¥–∫–∞ "–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"
        self.create_basic_transforms_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ"
        self.create_smoothing_tab()
        
        # –û–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫)
        self.image_display = ModernImageDisplay(workspace_frame, self.on_image_loaded)
    
    def create_basic_transforms_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π."""
        # –§—Ä–µ–π–º –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
        basic_frame = ttk.Frame(self.notebook, style='Modern.TFrame')
        self.notebook.add(basic_frame, text="üé® –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
        self.transform_settings = ModernTransformSettings(basic_frame, self.on_transform_type_change)
        self.transform_settings.set_apply_command(self.apply_basic_transform)
    
    def create_smoothing_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è."""
        # –§—Ä–µ–π–º –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        smoothing_frame = ttk.Frame(self.notebook, style='Modern.TFrame')
        self.notebook.add(smoothing_frame, text="üîß –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        self.smoothing_settings = ModernSmoothingSettings(smoothing_frame, self.on_filter_type_change)
        self.smoothing_settings.set_apply_command(self.apply_smoothing_filter)
    
    def create_bottom_panel(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∏–∂–Ω—é—é –ø–∞–Ω–µ–ª—å."""
        bottom_frame = ttk.Frame(parent, style='Modern.TFrame')
        bottom_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(10, 0))
        bottom_frame.columnconfigure(0, weight=1)
        bottom_frame.rowconfigure(0, weight=1)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.info_panel = ModernInfoPanel(bottom_frame)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(bottom_frame, 
                              textvariable=self.status_var, 
                              style='Status.TLabel',
                              anchor='w')
        status_bar.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(5, 0), padx=20)
    
    def setup_controller(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å callbacks."""
        self.controller.set_callbacks(
            on_status_update=self.update_status,
            on_image_display_update=self.update_image_display,
            on_info_update=self.update_info
        )
    
    def load_image(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞."""
        file_path = self.image_display.load_image_dialog()
        if file_path:
            self.controller.load_image(file_path)
    
    def save_image(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        file_path = self.image_display.save_image_dialog()
        if file_path:
            self.controller.save_image(file_path)
    
    def reset_image(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."""
        self.controller.reset_image()
    
    def apply_basic_transform(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ."""
        try:
            parameters = self.transform_settings.get_transform_parameters()
            self.controller.apply_transform(parameters)
        except ValueError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", str(e))
    
    def apply_smoothing_filter(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è."""
        try:
            parameters = self.smoothing_settings.get_filter_parameters()
            self.controller.apply_transform(parameters)
        except ValueError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", str(e))
    
    def on_transform_type_change(self, transform_type: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è."""
        # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        pass
    
    def on_filter_type_change(self, filter_type: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞."""
        # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        pass
    
    def on_image_loaded(self, file_path: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        self.controller.load_image(file_path)
    
    def update_status(self, message: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å."""
        self.status_var.set(message)
        self.root.update()
    
    def update_image_display(self, original_image, processed_image):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if original_image:
            self.animation_manager.fade_in(self.image_display.original_canvas, duration=300)
        if processed_image:
            self.animation_manager.fade_in(self.image_display.processed_canvas, duration=300)
        
        self.image_display.display_original_image(original_image)
        self.image_display.display_processed_image(processed_image)
    
    def update_info(self, info):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å."""
        # –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        self.animation_manager.fade_in(self.info_panel.notebook, duration=200)
        self.info_panel.update_info(info)
