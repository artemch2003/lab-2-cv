"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.
"""

import sys
import os
import tkinter as tk

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from image_processing.transforms.negative_transform import NegativeTransform
from image_processing.factories.transform_factory import TransformFactory
from di.config import create_container
from gui.main_window_refactored import MainWindow


def demonstrate_solid_principles():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID."""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID")
    print("=" * 60)
    
    # 1. Single Responsibility Principle (SRP)
    print("\n1. Single Responsibility Principle (SRP):")
    print("   ‚úÖ –ö–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –∏–º–µ–µ—Ç –æ–¥–Ω—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:")
    print("   - ImageManager: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    print("   - TransformManager: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏")
    print("   - TransformSettings: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI")
    print("   - ImageDisplay: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("   - InfoPanel: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å")
    
    # 2. Open/Closed Principle (OCP)
    print("\n2. Open/Closed Principle (OCP):")
    print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∑–∞–∫—Ä—ã—Ç–∞ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    TransformFactory.register_transform("–ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ", NegativeTransform)
    print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ '–ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ' –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞")
    
    # 3. Liskov Substitution Principle (LSP)
    print("\n3. Liskov Substitution Principle (LSP):")
    print("   ‚úÖ –í—Å–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã:")
    available_transforms = TransformFactory.get_available_transforms()
    print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {', '.join(available_transforms)}")
    
    # 4. Interface Segregation Principle (ISP)
    print("\n4. Interface Segregation Principle (ISP):")
    print("   ‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:")
    print("   - ImageLoaderInterface: –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("   - ImageSaverInterface: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("   - ImageDisplayInterface: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("   - TransformApplierInterface: –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π")
    
    # 5. Dependency Inversion Principle (DIP)
    print("\n5. Dependency Inversion Principle (DIP):")
    print("   ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä DI:")
    container = create_container()
    print("   ‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    print("   ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∏–Ω–∂–µ–∫—Ü–∏—é")
    
    print("\nüéâ –í—Å–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID —É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã!")
    print("=" * 60)


def run_application():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π SOLID –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤."""
    print("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–º –ø–æ SOLID...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    container = create_container()
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    root = tk.Tk()
    app = MainWindow(root, container)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    root.mainloop()


if __name__ == "__main__":
    demonstrate_solid_principles()
    
    print("\n" + "=" * 60)
    print("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print("=" * 60)
    
    run_application()
